1
00:00:00,440 --> 00:00:01,830
All right, you're done.

2
00:00:01,830 --> 00:00:03,690
Let's take a look at the solution.

3
00:00:03,690 --> 00:00:06,390
While we cannot insert
a vector directly,

4
00:00:06,390 --> 00:00:09,180
we can easily convert
a vector to an array.

5
00:00:09,180 --> 00:00:13,520
Once we've done this, the BulkInsert
method will insert very efficiently.

6
00:00:13,520 --> 00:00:17,300
As you can see, we've uncommented
out these next series of lines.

7
00:00:17,300 --> 00:00:20,250
This allows us to test our output,
to make sure

8
00:00:20,250 --> 00:00:22,749
that we've actually inserted
the right thing into the database.

9
00:00:24,420 --> 00:00:25,495
Let's actually run our app.

10
00:00:27,090 --> 00:00:29,990
And, as you can see, we're actually
reading the data out of the database

11
00:00:29,990 --> 00:00:32,830
that we just inserted all correctly.

12
00:00:32,830 --> 00:00:35,800
Now, our backend will
update efficiently, but we

13
00:00:35,800 --> 00:00:39,740
really need a way to update the frontend
without doing it on the main UI thread.

14
00:00:39,740 --> 00:00:43,960
Now, our backend will update
efficiently, but we really need to be

15
00:00:43,960 --> 00:00:47,320
querying things before requesting
them from the internet.

16
00:00:47,320 --> 00:00:50,410
After all, the point is to
have a responsive application.

17
00:00:50,410 --> 00:00:52,970
We're still not even updating
the screen until after we've

18
00:00:52,970 --> 00:00:54,860
pulled data down from the web.

19
00:00:54,860 --> 00:00:58,380
We also want to avoid doing
our query on the UI thread.

20
00:00:58,380 --> 00:01:02,770
Because, doing operations like queries
on the UI thread cause Android not to be

21
00:01:02,770 --> 00:01:06,680
able to draw frames fast enough,
which introduces frame rate jitter.

22
00:01:06,680 --> 00:01:10,700
Fortunately, Android offers
a pattern for that known as loaders.

