1
00:00:00,220 --> 00:00:02,860
目前，所有的列表项都有相同的布局。
Currently, all the list
items have the same layout.

2
00:00:02,860 --> 00:00:05,880
然而，我们希望今日项目使用不同的布局，
However, we want the today
item to use a different layout

3
00:00:05,880 --> 00:00:10,320
也就是我们之前在list_item_forecast_today XML文件中定义的。
which we defined earlier in the list
item forecast today XML file.

4
00:00:10,320 --> 00:00:13,460
这就是适配器项的“项视图类型”发挥作用的地方了。
This is where adapter item
view types will save the day.

5
00:00:13,460 --> 00:00:17,530
这是一个对所有适配器通用的概念，不只是针对CursorAdapter。
This is a general concept for
all adapters, not just cursor adapter.

6
00:00:17,530 --> 00:00:21,180
不再只是知道一个“项视图类型”，来给所有列表项
Instead of just knowing about one item
view type which yields the same layout

7
00:00:21,180 --> 00:00:25,570
产生相同的布局，适配器可以申明多个“项视图类型”，
for all list items, the adapter can
declare multiple item view types, so

8
00:00:25,570 --> 00:00:28,020
这样就可以有多个不同的列表项布局了。
it will have different
list item layouts.

9
00:00:28,020 --> 00:00:31,330
针对游标中给定的一行，天气预报适配器需要决定
For a given row in the cursor,
the forecast adapter needs to decide

10
00:00:31,330 --> 00:00:34,610
他应该是一个普通列表项还是一个今日列表项。
if it should be a regular list item or
a today list item.

11
00:00:34,610 --> 00:00:37,830
然后他就会解析，并且为适当的视图绑定数据。
Then it will inflate, and
bind data for the appropriate layout.

12
00:00:37,830 --> 00:00:40,810
我们现在跳到天气预报适配器的代码来学习如何
We'll jump into the forecast
adapter code now to learn how to

13
00:00:40,810 --> 00:00:42,760
处理第二个“项视图类型”
handle a second item view type.

14
00:00:42,760 --> 00:00:46,400
通常，在子类中，getViewTypeCount返回1，
Normally, in a sub class
getViewTypeCount returns one, but

15
00:00:46,400 --> 00:00:50,230
但是我们将会覆盖他，让他为两个不同的布局返回2。
we're going to override it so it returns
two for the two different layouts.

16
00:00:50,230 --> 00:00:52,870
但是他怎么知道何时使用一个布局何时另一个呢？
But how does it know when to
use one layout, or the other?

17
00:00:52,870 --> 00:00:56,830
我们覆写getItemViewType方法，这样当列表中的位置是
Well we override getItemViewType, so
that when the position in the list is

18
00:00:56,830 --> 00:00:59,760
0那么我们认为那就是今日视图类型。
zero then we say that
it's the today view type.

19
00:00:59,760 --> 00:01:02,800
否则，就是FUTURE_DAY视图类型。
Otherwise, it's
the FUTURE_DAY view type.

20
00:01:02,800 --> 00:01:05,280
这两种视图类型在上面声明好。
These two view types
are declared up above.

21
00:01:05,280 --> 00:01:08,760
他们就只是代表了视图类型的整形。
These are just integer
representations of the view type.

22
00:01:08,760 --> 00:01:12,500
数字必须从0开始，因为这些值不能大于
The numbering has to start at 0, because
these values cannot be greater than or

23
00:01:12,500 --> 00:01:14,830
或等于getViewTypeCount。
equal to getViewTypeCount.

24
00:01:14,830 --> 00:01:19,320
所以我们的位置值是0和1，这样我们知道0总是映射
So the possible values for us are 0 and
1, so that we know that 0 always maps

25
00:01:19,320 --> 00:01:23,610
到VIEW_TYPE_TODAY，1始终映射到VIEW_TYPE_FUTURE_DAY。
to the view_type_today, and that one
always maps to view_type_future_day.

26
00:01:23,610 --> 00:01:26,440
我们将要在newView方法中使用这一信息。
We're going to use this information
in the new view method.

27
00:01:26,440 --> 00:01:30,330
记住之前，我们初始化了list_item_forecast XML。
Remember that previously,
we inflated the list item forecast xml.

28
00:01:30,330 --> 00:01:34,370
现在我们将要使用“项视图类型”来判断我们应该使用
Now we're going to use item view type
to determine whether we should use one

29
00:01:34,370 --> 00:01:35,600
某一布局或另一个。
layout or the other.

30
00:01:35,600 --> 00:01:37,710
填写TODO来实现这一行为。
Fill in the TODO to
address this behavior.

31
00:01:37,710 --> 00:01:40,270
layoutID表示resourceID
LayoutID refers to resourceID

32
00:01:40,270 --> 00:01:42,890
其形式是R.layout.xxx
which is in the form of r
dot layout dot something.

