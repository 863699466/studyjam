1
00:00:00,240 --> 00:00:04,470
下面我们讲讲Loaders。Loaders是一个很棒的东西。
Let's talk about Loaders. Loaders are awesome. They were

2
00:00:04,470 --> 00:00:07,080
在Honeycomb中被引入开发框架，然而那时仅仅是兼容库的一部分。
introduced in Honeycomb, but are available as part of the

3
00:00:07,080 --> 00:00:09,400
所以你可以利用兼容库
support library. So you can take advantage of them

4
00:00:09,400 --> 00:00:13,170
在旧版本的系统中使用该特性。
when supporting earlier platform releases. Loaders are essentially the best

5
00:00:13,170 --> 00:00:16,640
Loaders对于Activity或Fragment中的异步数据读取来说基本上是最好的实现方法。
practice implementation for asynchronous data loading within an activity

6
00:00:16,640 --> 00:00:20,040
所以当你创建了一个Loader，它会创建
or fragment. So when you create a Loader, it creates

7
00:00:20,040 --> 00:00:23,100
一个asyncTask对象在后台读取数据。
an async task to load data on the background thread.

8
00:00:23,100 --> 00:00:25,480
当初始化数据读取完成后，它会在UI线程中进行同步,
It then syncs with the UI thread when the initial

9
00:00:25,480 --> 00:00:27,760
也可以通过它来监听正在处理的数据
loading is complete, and can be set up to monitor

10
00:00:27,760 --> 00:00:30,610
将数据的更新同步到UI线程
the underlying data, and deliver any updates to the UI

11
00:00:30,610 --> 00:00:33,640
之前你所做的那些工作，
thread as well. Best still, all that work you did

12
00:00:33,640 --> 00:00:36,500
添加ContentProvider到你的数据库，
adding a content provider to your database pays off right

13
00:00:36,500 --> 00:00:39,050
在这里可以通过CursorLoader来发挥作用了。CursorLoader
now, with the cursor loader. The cursor loader is an

14
00:00:39,050 --> 00:00:42,940
是AsyncTaskLoader（异步任务读取）的实现类，它专门用于处理对Content Provider的请求，
implementation of the async task loader, specifically designed to query

15
00:00:42,940 --> 00:00:46,320
通过返回Cursor对象来实现数据读取。你可以将
content providers, and return a cursor, which you can then

16
00:00:46,320 --> 00:00:50,410
该Cursor与UI进行线程绑定。它会随着Content Provider数据的改变
bind directly to a UI. It will automatically update that cursor,

17
00:00:50,410 --> 00:00:53,700
自动更新Cursor。更新操作会机遇底层的数据库进行。
whenever the underlying content provider changes, based on changes

18
00:00:53,700 --> 00:00:56,240
在程序设置发生改变后，
to the underlying database. And it will reconnect to the

19
00:00:56,240 --> 00:00:59,260
CursorLoader会在重新创建时重新连接
last returned cursor after being recreated, along with the

20
00:00:59,260 --> 00:01:02,320
当前Activity中最后返回的Cursor。这意味着
host activity, after a configuration change. That means you won't

21
00:01:02,320 --> 00:01:04,610
你不需要在设备屏幕仅仅被旋转就重新请求数据。
have to requery data, just because the device was

22
00:01:04,610 --> 00:01:07,600
CursorLoader会处理所有的Cursor管理和
rotated. So the cursor loader handles all of your cursor

23
00:01:07,600 --> 00:01:11,890
后台线程创建，UI线程同步，以及数据监听。
management and background thread creation, UI thread synchronization, and data

24
00:01:11,890 --> 00:01:15,380
如果你不使用Content Provider，
source monitoring. If you chose not to use content providers,

25
00:01:15,380 --> 00:01:19,340
那么你的选择就少了。但是你仍然可以使用loaders，
you chose poorly. But still, you can take advantage

26
00:01:19,340 --> 00:01:21,200
通过继承AsyncTaskLoader
of loaders, you just need to create your own

27
00:01:21,200 --> 00:01:24,200
来创建你自己的Loader类。
loader by extending async task loader directly. You

28
00:01:24,200 --> 00:01:26,220
关于更多相关内容，你可以参考下面的指导信息。
can find out more in the instructor notes below.

