1
00:00:00,000 --> 00:00:04,311
要记住  contract是一个协定  描述了在我们的数据模型和视图之间信息如何被存储
Remember, that a contract is an agreement between our data model and

2
00:00:04,311 --> 00:00:07,445
要记住  contract是一个协定  描述了在我们的数据模型和视图之间信息如何被存储
our views describing how information is stored.

3
00:00:07,445 --> 00:00:11,434
它包括常量字符串  这些字符串代表了用户接口将要显示的所有域
It contains constant strings to represent all the fields that our user

4
00:00:11,434 --> 00:00:14,543
在Sunsline的例子中  数据库将被存储在这里
interface will display, and in the case of Sunshine,

5
00:00:14,543 --> 00:00:16,312
在Sunsline的例子中  数据库将被存储在这里
that our database will store.

6
00:00:16,312 --> 00:00:19,234
我们仅仅覆盖所有我们将需要在2SQLI数据库里使用的列
We've just covered all the columns that we'll need to

7
00:00:19,234 --> 00:00:23,650
我们用这个数据库来存储天气和信息
use in our 2SQLI databases that will store weather and information.

8
00:00:23,650 --> 00:00:27,293
现在让我们学习这些列名常量如何在天气contract里声明
Now let's learn how these column names constraints are declared in our weather

9
00:00:27,293 --> 00:00:27,844
现在让我们学习这些列名常量如何在天气contract里声明
contract.

10
00:00:27,844 --> 00:00:31,461
让我们快速浏览下我们已经提供给你的天气contract类文件
Let's take a quick look at the weather contract class file that we've

11
00:00:31,461 --> 00:00:32,081
让我们快速浏览下我们已经提供给你的天气contract类文件
given you.

12
00:00:32,081 --> 00:00:38,083
contract类包含两个内部类  WeatherEntry和LocationEntry
The contract class has two inner classes, WeatherEntry and LocationEntry.

13
00:00:38,083 --> 00:00:42,622
每个内部类都包含定义表的常量字符串
Each of these inner classes contains constant strings that define tables.

14
00:00:42,622 --> 00:00:45,977
现在  我们的WeatherEntry类只含有列常量
Right now, we only have column constants for WeatherEntry,

15
00:00:45,977 --> 00:00:49,082
这个表含有天气预报信息
the table that contains weather forecast information.

16
00:00:49,082 --> 00:00:52,466
第一个常量是TABLE_NAME  对于WeatherEntry来说
The first constant is the TABLE_NAME which, for the WeatherEntry,

17
00:00:52,466 --> 00:00:54,081
是一个简单的单词 weather
is simply the word "weather".

18
00:00:54,081 --> 00:00:57,553
定义在WeatherEntry类里的常量值
The constant values as defined in the WeatherEntry class match the values

19
00:00:57,553 --> 00:00:59,352
要和存储在天气表里面的值相匹配
we're storing in the weather table.

20
00:00:59,352 --> 00:01:01,924
举个例子  我们已经获得最低气温
For example, we've got minimum temperature,

21
00:01:01,924 --> 00:01:04,379
在这儿定义的是COLUMN_MIN_TEMP
which is defined here as COLUMN_MIN_TEMP.

22
00:01:04,379 --> 00:01:06,846
气压列定义为COLUMN_PRESSURE
Pressure column is defined as COLUMN_PRESSURE.

23
00:01:06,846 --> 00:01:10,502
但是我们还少了一列  这列用来定义唯一ID
But we're missing a column to define the unique ID.

24
00:01:10,502 --> 00:01:14,486
这是因为这个类是继承接口类BaseColumns的
This is because we're implementing the class, BaseColumns,

25
00:01:14,486 --> 00:01:17,004
这个类包括一个叫做_id的常量
which contains a constant called _id.

26
00:01:17,004 --> 00:01:22,444
通过添加一个_id列来作为数据表的主键  我们可以利用
By adding an _id column to our table as a primary key, we can utilize various

27
00:01:22,444 --> 00:01:27,301
多种Android辅助类的依赖被创建的_id列
Android helper classes that rely on the _id column being created.

28
00:01:27,301 --> 00:01:30,847
LOC_KEY列就是我们早些时候讨论过的外键
The LOC_KEY column is the foreign key we talked about earlier,

29
00:01:30,847 --> 00:01:33,419
指向地理位置表里面的记录
that points to records in the location table.

30
00:01:33,419 --> 00:01:36,365
因为实际上列名实际上是不包含数据类型的
Since the column names don't actually contain data types,

31
00:01:36,365 --> 00:01:39,540
所以  一般在在变量名称中注释这些类型
it's usual to annotate these types in the variable names, and or

32
00:01:39,540 --> 00:01:42,540
过着通过注解来让我们的contract更加明确
comments to make our contract more explicit
