1
00:00:00,220 --> 00:00:05,400
关系弄清楚了。但是我们仍然没有数据库
Now that's a contract. But we still don't have a database.

2
00:00:05,400 --> 00:00:10,960
我们的数据库类会继承一个安卓类-—SQLITEOpenHELPER
Our database class will extend an Android class. SQLITEOpenHELPER.

3
00:00:13,910 --> 00:00:18,900
SQLITEOpenHELPER有很强力的工具来帮我们处理数据库版本
SQLITEOpenHELPER contains cool stuff to help us handle database versioning.

4
00:00:18,900 --> 00:00:23,280
当我们以后修改数据库时，它会帮助我们修改表
As we make changes to our database in the future, it will help us modify our

5
00:00:23,280 --> 00:00:28,510
对于很多App，能在更新版本时不丢失数据是非常关键的
tables. For many apps, being able to upgrade to a new version without data loss

6
00:00:28,510 --> 00:00:34,585
让我们来data包中创建一个继承SQLITEOpenHelper
is critical. Let's create a WeatherDBHelper class within the data package and

7
00:00:34,585 --> 00:00:39,732
的WeatherDBHelper类
have that extend SQLite Open Helper. [SOUND] We can add

8
00:00:39,732 --> 00:00:46,711
我们能通过Ctrl+I快捷键添加所需函数
the required methods by hitting Ctrl+I.

9
00:00:46,711 --> 00:00:51,370
然后按Ctrl+O来覆写构造器，把这些变量
And we can override the constructor by hitting Ctrl+O. So now we can hard code

10
00:00:51,370 --> 00:00:56,800
硬编码。硬编码name为我们的DATABASE_NAME
these variables to constructor. Hard coding name to database name,

11
00:00:56,800 --> 00:01:03,600
factory改为null，version改成DATABASE_VERSION
our factory to null, and our version to database version.

12
00:01:03,600 --> 00:01:06,410
你可以看到我将DATABASE_NAME设为了公共常量（public）
Now, you'll note I have made the database name public, and

13
00:01:06,410 --> 00:01:09,260
这是为了我们之后的测试用
that's because we're going to use it in our tests in the future.

14
00:01:09,260 --> 00:01:12,260
我们在下面有了onCreate()和onUpgrade()方法
Now you see we've got it on create and an onUpgrade method.

15
00:01:12,260 --> 00:01:15,700
在onCreate()中，我们准备用WeatherContract中的数据来
In the OnCreate method, we're going to start by creating a string to build

16
00:01:15,700 --> 00:01:20,060
构造一个字符串来完成天气的表
the weather entry table using data defined within the weather entry contract.

17
00:01:20,060 --> 00:01:23,100
我在这儿加一个注释，这样你就知道待会儿要回到哪里来
Now I'm just going to add this comment, so you know where to go back and

18
00:01:23,100 --> 00:01:26,730
加上地点的那些东西了。因为天气条目是取决于地点条目的
add the location entry stuff later. Since weather entry depends on

19
00:01:26,730 --> 00:01:30,100
我通常会先写好地点条目
location entry, I would normally write location entry first, but

20
00:01:30,100 --> 00:01:34,180
但是天气条目非常复杂。所以更好的做法是我解释下我们在做什么
weather entry is pretty complicated. So I'd rather explain what we've done and

21
00:01:34,180 --> 00:01:38,890
然后将地点条目交给你们写。我们准备用原始SQL
leave location entry up to you. We're going to use raw SQL for

22
00:01:38,890 --> 00:01:43,510
来创建表，从表名开始
our create table query, beginning with the table name from our contract.

23
00:01:43,510 --> 00:01:47,612
这时候，我们应该先导入WeatherContract.locationentry和
At this point, it's helpful to import WeatherContract.locationentry and

24
00:01:47,612 --> 00:01:51,590
WeatherContract.weatherentry。这会使我们的SQL语句更容易读懂。我们从
weather entry. It makes our query so much easier to read. We'll start with

25
00:01:51,590 --> 00:01:57,130
ID开始，将它设置为自增主键
our ID field, which we'll set as our primary key in an auto increment field.

26
00:01:57,130 --> 00:02:03,060
注意下整数（integer）在SQLite中是一个有符号并且最长8字节的数
Note that integer is actually a signed value up to eight bytes long in SQLite.

27
00:02:03,060 --> 00:02:07,370
用自增功能，不过这可能和你想的有点不同
Using the auto increment feature doesn't do precisely what one might think.

28
00:02:07,370 --> 00:02:10,800
设置ID作为一个整数主键实际上使
Setting up the ID is an integer primary key actually makes

29
00:02:10,800 --> 00:02:15,360
这个值变得独一无二，但是它可能不是总是增长的
the value unique whenever you do an insert, but it may not always increment.

30
00:02:15,360 --> 00:02:19,400
它可能会重复利用记录已经被删除的已存在的ID值
It may reuse existing ID values of the records have been deleted.

31
00:02:19,400 --> 00:02:23,230
而自动增长的有用之处在于，有时候你会用两种方式
What autoincrement is really useful for, is if you're synchronizing data two

32
00:02:23,230 --> 00:02:27,160
与服务器同步数据。但是，在这儿我们会用上它，因为它会使
ways with the server. But, we'll take advantage of it here because it makes data

33
00:02:27,160 --> 00:02:30,870
数据排列得更加自然，因为我们是以从服务器上取回来的顺序
from our queries sort a bit more naturally because we insert them in the right

34
00:02:30,870 --> 00:02:35,000
来插入它的。我们在字段上添加了点约束条件
order coming from the server. In general, we're using constraints on fields.

35
00:02:35,000 --> 00:02:39,500
在这里不是null。这么做的原因是会让数据库替我们做些
In this case, not null. We do this because it allows the database to do much of

36
00:02:39,500 --> 00:02:43,510
参数验证。这样做有个缺点，
our parameter validation for us. The tricky part about doing it this way,

37
00:02:43,510 --> 00:02:46,800
当约束失败时我们得不到有用的错误信息
is that we don't get useful errors when these constraints fail, so

38
00:02:46,800 --> 00:02:51,240
所以对debug是一个挑战。我们在日期这
it can be challenging to debug. We're using a human readable string for

39
00:02:51,240 --> 00:02:54,330
用一个可读性强的字符串。这么做没什么问题
the date. There's no strong reason for or

40
00:02:54,330 --> 00:02:58,750
我们希望尽量简化查询
against this choice. We wanted to normalize the date to simplify our queries,

41
00:02:58,750 --> 00:03:03,400
并且尽量增强可读性。从open weather服务器取得的日期
and human readability simplifies debugging. The date comes from open weather in

42
00:03:03,400 --> 00:03:07,190
是Unix时间格式，里面有些信息我们需要去除掉
Unix time stamp format with some time information that we need to get rid of.

43
00:03:08,200 --> 00:03:13,290
我不准备每个字段都详细讲。REAL在SQL中代表浮点
I'm not going to cover every field. Real means floating point in SQL.

44
00:03:13,290 --> 00:03:17,480
用不动点整数很好
It would have been fine to have used integer with fixed point math as well and

45
00:03:17,480 --> 00:03:19,470
有些人还说这会更快
some would argue that this would be faster, but

46
00:03:19,470 --> 00:03:24,180
但是REAL在这里因为我们存储用了浮点值，所以更直观
real is more straight forward since we're storing floating point values. Now for

47
00:03:24,180 --> 00:03:26,635
有趣的部分来了，我们来设置一个LOC_KEY
the fun stuff, we're going to set up a loc key.

48
00:03:26,635 --> 00:03:31,410
这是与你要创建的地点条目表不相关的一个键
It's a foreign key to the location entry table that you will be building.

49
00:03:31,410 --> 00:03:35,930
SQLite用它来增强表之间的联系
This causes SQLite to enforce the relationship between the tables.

50
00:03:35,930 --> 00:03:41,000
我们不能在没有相关地点条目的时候增加一个天气条目
We cannot insert a weather entry when there is no corresponding location entry.

51
00:03:41,000 --> 00:03:44,820
并且我们不能在仍然有天气条目依赖于地点条目的时候，删除这个地点条目
And we cannot delete a location entry if there are still weather entries that

52
00:03:44,820 --> 00:03:49,840
很酷，对不对？最后一个约束条件
depend on it. Cool stuff, right? One last constraint.

53
00:03:49,840 --> 00:03:56,140
我们的日期文本加上地点必须是独一无二的。如果冲突了，取代这个数据
Our date text plus location must be unique. On conflict, replace the data.

54
00:03:56,140 --> 00:04:00,050
这让我们从open weather API添加数据更轻松
This allows us to insert new data from the open weather API easily.

55
00:04:00,050 --> 00:04:04,080
当天气预报改变时，保留已有的键然后更新值
Preserving existing keys and updating the value as the forecast changes.

