1
00:00:00,160 --> 00:00:03,030
在adapter的bindView方法中，
In the adaptor bindView method, we have to traverse the view

2
00:00:03,030 --> 00:00:05,990
需要按照view的层次依次遍历来添加数据。
hierarchy to find all these different views to set data onto

3
00:00:05,990 --> 00:00:09,090
即便是被回收的view，意味着view
them. If it's a recycled view, meaning that it was used

4
00:00:09,090 --> 00:00:12,030
之前在列表中被用于显示其他数据，我们仍需遍历将其找出。
in the list previously to display other data, we still have

5
00:00:12,030 --> 00:00:15,252
为了避免不必要的findBiewById调用，
to traverse and find out the views. To remove unnecessary find

6
00:00:15,252 --> 00:00:18,520
我们可以使用View Holder模式。
View By ID calls, we can use the View Holder pattern.

7
00:00:18,520 --> 00:00:21,280
当要处理一个包含不同类型view的列表布局时，
For a list item layout that contains different views, we can

8
00:00:21,280 --> 00:00:25,350
我们可以创建View Holder对象。它的成员变量代表布局中的view。
create a View Holder object. It contains member variables that reference each

9
00:00:25,350 --> 00:00:28,040
View Holder对象存储在view的tag域中。
view in the layout. The View Holder object is stored in

10
00:00:28,040 --> 00:00:31,030
当该view下一次被回收并重复利用时
the tag field of the view. The next time that the view

11
00:00:31,030 --> 00:00:34,960
我们可以立即获得需要的数据。
is recycled and used again. We can just immediately set the data

12
00:00:34,960 --> 00:00:38,180
这时你就不需要在把所有的view遍历一遍了。
onto these fields. You don't have to go find all the views

13
00:00:38,180 --> 00:00:41,130
这就是View Holder类。你可以随意给他起名字。
again. This is our View Holder class. You can name it anything

14
00:00:41,130 --> 00:00:45,046
这货就是个普通的Java类。当确定了布局资源后，
you want, it's just a Java class. Given the list item layout,

15
00:00:45,046 --> 00:00:47,220
我们执行一系列findViewById的操作。
we do all the find view by ID calls. That way, we

16
00:00:47,220 --> 00:00:50,705
这样一来，我们就能获得所有子view的引用。在newView方法中，
can hold references to all the child views. In the newView method,

17
00:00:50,705 --> 00:00:54,080
当我们加载了view之后，我们使用该view创建一个ViewHolder对象。
after we've inflated the view, we create a new View Holder object

18
00:00:54,080 --> 00:00:57,340
然后将所创建的ViewHolder对象的引用作为view的tag属性。
from that view. Then we set the View Holder as the tag of

19
00:00:57,340 --> 00:01:00,100
tag可以用于保存任何对象
the view. The tag can be used to store any object. But

20
00:01:00,100 --> 00:01:02,530
但是别乱用tag，因为在读取tag的时候，你需要提前知道它所存储的是什么
don't abuse it, because when you read it back, you have to know

21
00:01:02,530 --> 00:01:04,858
ViewHolder是使用tag的典型用法。
what you stored in there. A View Holder is a good use

22
00:01:04,858 --> 00:01:08,470
然后在bindView方法中，我们可以使用tag
case for it. Then in the bindView method. We read from the tag,

23
00:01:08,470 --> 00:01:12,670
来获得之前创建的ViewHolder对象。
to get back the View Holder object. And we immediately have references, to

24
00:01:12,670 --> 00:01:16,260
然后我们能立即拿到所有所需的view的引用，比如图标View、
all the individual views we need to update, such as the Icon View,

25
00:01:16,260 --> 00:01:19,670
日期View、描述View等等。来吧！动手创建一个ViewHolder类
the Date View, the Description View etc. Go ahead and define a View

26
00:01:19,670 --> 00:01:23,030
然后优化你的adapter。当你运行程序的时候
Holder class and update your adapter to use it. When you compile and

27
00:01:23,030 --> 00:01:25,780
你不会看到什么明显的变化。但是当你的列表
run, you may not see that noticeable of a difference. But now your

28
00:01:25,780 --> 00:01:28,780
扩展到成百上千的规模的时候，它会比之前运行的更高效，体验更棒。
list will perform better when it scales to hundreds or thousands of items.

