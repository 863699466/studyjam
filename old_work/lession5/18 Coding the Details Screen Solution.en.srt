1
00:00:00,320 --> 00:00:03,420
那么你是如何把UI分割成一个一个的小块的呢？
So how did you break up the UI into smaller components?

2
00:00:03,420 --> 00:00:06,730
你可能认为这里是两列，
Well, you might have thought that this could be two columns, but

3
00:00:06,730 --> 00:00:09,080
但是这里的元素却是很难定位的。
then it would be hard to position the elements here. You

4
00:00:09,080 --> 00:00:12,140
你从屏幕高度看它是垂直居中的，
could center them vertically within the height of the screen, but it

5
00:00:12,140 --> 00:00:14,820
但它却不一定与左侧的温度视图对齐。
wouldn't necessarily line up with the temperature views on the left-hand

6
00:00:14,820 --> 00:00:18,980
反而，这更像水平线性布局结构。
side. Instead, this looks more like a horizontal linear layout. Then, the

7
00:00:18,980 --> 00:00:21,660
而其他部分的元素可以使用垂直线性布局。
rest of the elements could be laid out by using a vertical

8
00:00:21,660 --> 00:00:25,410
垂直线性布局将有6个子元素。
linear layout. The vertical linear layout would have six children. The third

9
00:00:25,410 --> 00:00:29,460
第三个元素还采用了水平线性布局，并包括两个子元素。
element would be a horizontal linear layout, composed of two children.

10
00:00:29,460 --> 00:00:32,685
这两个元素，一个是由两个文本视图垂直组成的，
The first would be another vertical linear layout with these two texts

11
00:00:32,685 --> 00:00:35,680
一个则是由另外两个垂直视图组成的。
views, and the second element would be another vertical linear layout

12
00:00:35,680 --> 00:00:38,540
为了屏幕内容能够垂直滚动，
composed of these two 2 elements. To make the contents of the

13
00:00:38,540 --> 00:00:42,520
我将这些元素都放入scroll view中。
screen vertically scrollable, we put it inside a scroll view. Using

14
00:00:42,520 --> 00:00:45,090
这里我们用列表视图就会显得浪费，因为我们不需要将列表项扩展到无限条，
a list view here would be overkill, because we don't need to

15
00:00:45,090 --> 00:00:48,310
我们也不会再次使用这些列表项。
scale to an infinite number of item and we don't need recycling.

16
00:00:48,310 --> 00:00:50,730
这有在屏幕上显示的确定数字，所以scroll view是更好的选择。
There's a fixed number of fields on the screen, so a scroll

17
00:00:50,730 --> 00:00:53,800
我将向你展示实现这些元素的具体XML布局代码。
view is the perfect choice. I can show you our implementation for

18
00:00:53,800 --> 00:00:57,165
我们将一些数据固定编码在layout，
the fragment detail XML layout. We hard coded some data in the

19
00:00:57,165 --> 00:00:59,270
这样就能在设计面板上预览了。
layout, so that it would show up as a preview in the

20
00:00:59,270 --> 00:01:02,160
这里我们可以看见根节点是Scroll View。
Design Pane. At the root of the View hierarchy, we have a Scroll

21
00:01:02,160 --> 00:01:05,680
Scroll Views最多只能有一个子项。
View. Scroll Views can only have max one child. So we set

22
00:01:05,680 --> 00:01:09,050
所以我们将之设为垂直线性布局。在这个布局中，
that to be the vertical linear layout. Inside of this layout, we have

23
00:01:09,050 --> 00:01:11,960
我们有文本视图显示一周中的一天，日历日期，
a text view for the day of the week, the calendar date,

24
00:01:11,960 --> 00:01:16,000
然后是一个水平线性布局的。随后是湿度文本视图，
and then a horizontal linear layout. This is followed by the humidity text

25
00:01:16,000 --> 00:01:19,320
风力文本视图和气压文本视图。
view, wind text view and pressure text view. In the XML

26
00:01:19,320 --> 00:01:22,200
在XML代码中，我们看到scroll view中包含了预览用的线性布局。
code, we see the scroll view with the trial linear layout. We

27
00:01:22,200 --> 00:01:24,830
我们使它的padding为16dp，
give it some padding of 16dp, so that the content does

28
00:01:24,830 --> 00:01:27,660
这样内容就不会冲靠在屏幕边缘。
not flush up against the edge of the screen. Then we see

29
00:01:27,660 --> 00:01:31,510
然后我们看到文本视图，接着是水平线性布局。
the text views followed by the horizontal linear layout. We specify

30
00:01:31,510 --> 00:01:35,050
我们指定layout margin top为16dp，让文本视图的底部有更多空间。
layout margin top of 16dp to give it some more space from

31
00:01:35,050 --> 00:01:38,090
在这个水平线性布局中，
the bottom of this text view. Within this horizontal linear layout, we

32
00:01:38,090 --> 00:01:41,290
我们有一个垂直线性布局，它的width为0 weight为1。
have one vertical linear layout which has a width of zero and

33
00:01:41,290 --> 00:01:43,980
另一个线性布局也是这样，
a weight of one. And another linear layout with the

34
00:01:43,980 --> 00:01:46,170
width为0 weight为1 。
width at zero and a weight of one. That means that

35
00:01:46,170 --> 00:01:49,690
意思是这两个子项具有相同的宽度。
both of these children have equal width. For this linear layout,

36
00:01:49,690 --> 00:01:52,980
对于这个线性布局，我们让gravity为center_horizontal。
we specified gravity to be center horizontal. That means that the

37
00:01:52,980 --> 00:01:56,670
意味着，在这个布局中，内容将被水平居中放置，包括图标
contents inside of it will be centered horizontally, which includes

38
00:01:56,670 --> 00:01:59,850
以及预报文本的视图。
the icon, as well as the forecast text view. Lastly, we

39
00:01:59,850 --> 00:02:03,180
最后，我们将剩余的文本视图用来显示其他的天气情况。
have the remaining text views for the other weather details. When

40
00:02:03,180 --> 00:02:06,330
当我们更新更详细的内容时，布局会看起来更好一点。
the layout looks good, we update the detail fragment. At this

41
00:02:06,330 --> 00:02:09,184
这个时候，我们可以将其移动到自己的文件中。
point, we also move it into its own file. In the

42
00:02:09,184 --> 00:02:11,950
在onLoadFinish方法中，我们曾用大量的findViewById调用。
onload finish method, we used to have a lot of find view

43
00:02:11,950 --> 00:02:15,770
然而，我们我们可以更早的缓存住他们，这样就只要查找一次。
by ID calls. However, we can cache those views earlier so that

44
00:02:15,770 --> 00:02:19,230
在onCreateView方法中，
we only have to fetch them once. In the onCreateView method, once

45
00:02:19,230 --> 00:02:21,560
一旦视图被解析，我们就可以
the view is inflated, we can go and find a reference

46
00:02:21,560 --> 00:02:24,420
找到所有后续要使用的视图的引用。
to all the views we'll need later. We store these views as

47
00:02:24,420 --> 00:02:27,640
我们把这些视图作为类的成员变量来保存。
member variables in a class. Which is why they start with the

48
00:02:27,640 --> 00:02:31,450
所以他们都以m开头。在onCreateLoaded方法中，
letter M. In the onCreateLoaded method, we make sure that the projection

49
00:02:31,450 --> 00:02:34,930
我们确保从内容提供器中查询的映射包含了所有我们需要的信息。
that we're requesting from the content provider contains all the information

50
00:02:34,930 --> 00:02:38,200
特别是，我们刚刚为止添加了视图的那几个新的字段。
that we need. Especially the new fields that we just added views

51
00:02:38,200 --> 00:02:40,960
然后在onLoadFinish方法中，
for. Then in the onload Finish method, we get the cursor

52
00:02:40,960 --> 00:02:43,920
我们用游标返回我们需要的信息。我们通过游标读取天气情况ID。
back with the data we need. We read the weather condition ID

53
00:02:43,920 --> 00:02:46,610
我们以后将会用到这个来确定正确的图标。
from the cursor. And we're going to need this later to determine

54
00:02:46,610 --> 00:02:49,500
但现在，我们可以先用一个占位图标。
the right icon. But for now, we can just use a placeholder

55
00:02:49,500 --> 00:02:52,990
我们继续从游标中读取数据更新视图，
icon. We continue reading from the cursor and updating the views such

56
00:02:52,990 --> 00:02:56,670
比如日期、简介和温度。
as for the date and description and temperatures. For the new views

57
00:02:56,670 --> 00:02:59,360
对于湿度、风力、气压这些新视图，
for humidity, wind, and pressure, we read the

58
00:02:59,360 --> 00:03:01,860
我们读取光标位置的信息，然后正确的为UI格式化信息。
information from the cursor, and then we format it

59
00:03:01,860 --> 00:03:04,680
这就涉及从代码片段中拷贝
properly for the UI. This involved copying over

60
00:03:04,680 --> 00:03:07,520
字符串和工具方法了。
the strings and the utility method from the gist.

