1
00:00:00,090 --> 00:00:03,150
目前，这是我们的天气预报列表. 它看着还可以，
Currently, this is our forecast list. It looks okay, but

2
00:00:03,150 --> 00:00:04,689
但是要是我们能把温度符号加上那就更好了
it would be nice if we could show the degree

3
00:00:04,689 --> 00:00:08,310
最佳实践就是使用这个标注。
symbol for these temperature values. Using this notation is best

4
00:00:08,310 --> 00:00:11,580
它可以帮助翻译器了解如何重排文本和参数
practice. It will help the translator know how to reorder the

5
00:00:11,580 --> 00:00:14,290
来符合本地语言习惯。
text and the parameters so that it fits the local

6
00:00:14,290 --> 00:00:16,790
那么接下来我们看一下如何用这个办法
language. Now let's look at how we can use this

7
00:00:16,790 --> 00:00:20,930
在我们的应用中格式化温度数据。在string.xml文件中
method to format temperatures within our app. Within the string.xml

8
00:00:20,930 --> 00:00:25,400
我们声明了温度字符资源。我们使用xliff标签
file, we declared the format temperature string resource. We use xliff

9
00:00:25,400 --> 00:00:28,250
来指明这是十进制温度数据的位置，
tag to denote that this is where the decimal temperature

10
00:00:28,250 --> 00:00:30,850
后面紧跟着温度符号的Unicode值
value will go. This is followed by the unicode

11
00:00:30,850 --> 00:00:33,940
在Utility类中，
character for the degrees symbol. In the utility class, in

12
00:00:33,940 --> 00:00:37,770
我们可以在formatTemperature方法中使用该字符串资源。
the format temperature method, we can use this string resource. Remember

13
00:00:37,770 --> 00:00:40,090
记住，在这个方法中，我们需要传递两个参数：温度值
that, in this method, we take in a temperature and

14
00:00:40,090 --> 00:00:43,530
和用户是使用公制单位还是英制单位的选项。
a user's preference for metric or imperial. Then, we return

15
00:00:43,530 --> 00:00:47,140
之后该方法会返回已转换的温度值。之后我们还会修改这个方法
the converted temperature. We're going to modify this method so that

16
00:00:47,140 --> 00:00:50,460
使它能返回一个带有温度符号的字符串。
it also returns the formatted string with a degrees symbol after

17
00:00:50,460 --> 00:00:53,240
要实现这个，在传递参数的时候我们还要传递一个context引用
the value. In order to do this. We need to pass

18
00:00:53,240 --> 00:00:56,270
通过context，我们可以获得之前所声明的字符串的ID
a context. From the context we can get access to the

19
00:00:56,270 --> 00:01:00,310
然后我们还可以将其他附加的参数
string resource ID that we declared earlier. Then we passed in any

20
00:01:00,310 --> 00:01:03,560
传递给字符模板。而在这个例子中
additional parameters for that string template. In this case we only have

21
00:01:03,560 --> 00:01:06,810
仅需要传递一个温度值即可。
one parameters so we pass in the temperature value. Then this

22
00:01:06,810 --> 00:01:10,350
然后该方法会返回一个温度格式的字符串。
fully formatted string gets returned to the caller. This method is used

23
00:01:10,350 --> 00:01:13,290
这个方法被用在天气预报列表里，同时也用在详细内容页面。
in the forecast list, as well in the detail page. So we

24
00:01:13,290 --> 00:01:15,740
所以我们也要在那里更新相关代码，这样他就会以新的参数编译。
also had to update the code there so that it would compile

25
00:01:15,740 --> 00:01:19,120
这就是程序修改后的样子。
with this new parameter. And this is what the app looks like fter

26
00:01:19,120 --> 00:01:22,020
那么动手在你的代码里使用字符资源
the change. Go ahead and make the change in your code to add a

27
00:01:22,020 --> 00:01:24,160
显示温度吧！
string resource for displaying temperature in

28
00:01:24,160 --> 00:01:26,940
完成后在方框里打钩。
degrees. Check this box when you're done.

29
00:01:26,940 --> 00:01:29,620
请记住用这个语句格式来实现
And remember, use this notation going forward

30
00:01:29,620 --> 00:01:31,360
字符串的格式化操作。
for when you need to format strings

