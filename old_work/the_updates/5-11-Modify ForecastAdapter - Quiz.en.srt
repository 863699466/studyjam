1
00:00:00,100 --> 00:00:04,170
Currently, the app shows dummy data
that was hard-coded into the XML file.

2
00:00:04,170 --> 00:00:06,650
Let's make the actual
weather data appear on screen

3
00:00:06,650 --> 00:00:08,280
using the Forecast Adapter.

4
00:00:08,280 --> 00:00:11,080
For now we'll use the same layout for
all list items.

5
00:00:11,080 --> 00:00:14,730
But we'll incorporate the today.xml
layout in the next video.

6
00:00:14,730 --> 00:00:17,960
Conceptually the forecast adapter
manages the logic so that for

7
00:00:17,960 --> 00:00:21,620
each row in the cursor we create
a corresponding list item.

8
00:00:21,620 --> 00:00:25,340
Think back on the explanation in
lesson one about the array adapter.

9
00:00:25,340 --> 00:00:27,960
Except instead of the data
source being an array,

10
00:00:27,960 --> 00:00:30,820
now the data source is
a cursor from the database.

11
00:00:30,820 --> 00:00:34,590
The layout for the list item is defined
in the list item forecast xml file.

12
00:00:34,590 --> 00:00:38,780
For one row of the cursor we're going to
go through and extract out the values.

13
00:00:38,780 --> 00:00:41,130
We call it binding
the data to the views,

14
00:00:41,130 --> 00:00:44,650
because we take the value in each
column and set it in a different view.

15
00:00:44,650 --> 00:00:47,190
For example the high temperature value

16
00:00:47,190 --> 00:00:49,610
would be set onto the high
temperature text view.

17
00:00:49,610 --> 00:00:53,590
The low temperature value will be set
on to the low temperature text view.

18
00:00:53,590 --> 00:00:56,690
For the next row we bind
the data in the same way.

19
00:00:56,690 --> 00:01:00,100
Until we create a list item for
each row in the cursor.

20
00:01:00,100 --> 00:01:02,640
Currently our code
defines forecast adapter

21
00:01:02,640 --> 00:01:05,459
as extending from
the cursor adapter class.

22
00:01:05,459 --> 00:01:06,910
If you look at the documentation for

23
00:01:06,910 --> 00:01:10,090
cursor adapter, you'll notice
that it is an abstract class.

24
00:01:10,090 --> 00:01:12,830
There are two abstract methods
that we need to override.

25
00:01:14,080 --> 00:01:17,420
Bind view, and new view.

26
00:01:17,420 --> 00:01:22,050
The new view method, returns a new list
side and layout that has no data in it.

27
00:01:22,050 --> 00:01:25,050
The bind view method,
takes an existing list item lay out, and

28
00:01:25,050 --> 00:01:27,760
updates it with the data
from the cursor.

29
00:01:27,760 --> 00:01:31,080
In the forecast adapter class
in the new view method,

30
00:01:31,080 --> 00:01:34,441
we inflate the list_item_forecast
XML layout.

31
00:01:34,441 --> 00:01:37,780
Then in the bindView method we
bind the data from the cursor to

32
00:01:37,780 --> 00:01:39,990
the individual views.

33
00:01:39,990 --> 00:01:43,540
For example, from the cursor we
read out the weather description.

34
00:01:44,640 --> 00:01:48,100
Then we have to go through the view
hierarchy to find the text view

35
00:01:48,100 --> 00:01:51,350
that has the id,
list_item_forecast_textview.

36
00:01:51,350 --> 00:01:53,051
Once we find the text, once we,

37
00:01:53,051 --> 00:01:57,680
once we find the text view then we can
update it with the right description.

38
00:01:57,680 --> 00:02:01,160
We've provided a gist below of the
bindView method to get you started, but

39
00:02:01,160 --> 00:02:03,660
we left some to do's for you to handle.

40
00:02:03,660 --> 00:02:07,520
We've provided a gist of code for the
BindView method to help you get started,

41
00:02:07,520 --> 00:02:10,310
but we left some to do's in there for
you to do.

42
00:02:10,310 --> 00:02:13,500
In the gist, we also included some
helper methods and strings for

43
00:02:13,500 --> 00:02:14,890
date formatting.

44
00:02:14,890 --> 00:02:17,190
That's because in our
current implementation,

45
00:02:17,190 --> 00:02:18,860
all the dates are displayed
in the same way.

46
00:02:18,860 --> 00:02:22,980
In the wire frames through,
we have a more friendly date format.

47
00:02:22,980 --> 00:02:28,210
Such as today, tomorrow, Wednesday,
Thursday, etcetera here's the logic for

48
00:02:28,210 --> 00:02:31,360
what the helper method does to
get the friendly date's string

49
00:02:31,360 --> 00:02:35,550
if it's this week it says today or
tomorrow or the day of the week.

50
00:02:35,550 --> 00:02:40,250
If it's more than a week out then we use
the format Monday, June 8th and so on.

51
00:02:40,250 --> 00:02:43,290
After you compile and run the app,
the actual weather forecast data

52
00:02:43,290 --> 00:02:47,640
should now be showing in the app, and
it's using a more friendly date format.

53
00:02:47,640 --> 00:02:48,940
Check these boxes when you're done.

