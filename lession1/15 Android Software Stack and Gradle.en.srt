1
00:00:00,680 --> 00:00:04,090
让你的程序简洁的运行在模拟器上，
The simplicity of hitting run and having your app appear on an emulator,

2
00:00:04,090 --> 00:00:08,335
规避冗余。哦，别忘了，Android是完全的软件叠层架构。
hides a lot of complexity. Remember that Android is a full software stack.

3
00:00:08,335 --> 00:00:12,190
Adspace 是 Linux 内核，
Adspace is a Linux Kernel,

4
00:00:12,190 --> 00:00:16,329
它可以处理硬件性能和面板管理能力低的任务。
which handles low level tasks like hardware fibers and panel management.

5
00:00:16,329 --> 00:00:20,757
更重要的是，一些核心C和C++库，像 Libsc、SQLite 和 Android运行库。
On top of that, are some core C and C plus plus libraries like Libsc and

6
00:00:20,757 --> 00:00:25,920
这包括简单的Android库和Android虚拟机，
SQLite and the Android Runtime. That includes cool Android libraries and

7
00:00:25,920 --> 00:00:31,240
Dalvik或者近期出的ART。
the Android virtual machines, Dalvik or more recently ART. Your apps run

8
00:00:31,240 --> 00:00:36,000
你的程序运行需要应用程序在虚拟机上使用类、服务、框架进行实例化。 
within its own instance of the VM using the classes and services provided here

9
00:00:36,000 --> 00:00:40,570
最重要的是，你的程序位于应用层，
in the application framework. On top of that, sits the application layer,

10
00:00:40,570 --> 00:00:44,970
这里也是设备上其他程序安装的地方。
which includes your app and every other app that's installed on the device. So,

11
00:00:44,970 --> 00:00:48,800
所以，当你在Android Studio点击运行你的程序时，
when you hit Run in Android Studio, the first thing that happens is your code

12
00:00:48,800 --> 00:00:53,320
首先得将你的代码编译成虚拟机可以运行的字节代码。
gets compiled into byte code that can be run in the Android Virtual Machine.

13
00:00:53,320 --> 00:00:58,030
而这个代码会被再次放到到机器上。
That then gets installed onto the device. In Android Studio,

14
00:00:58,030 --> 00:01:02,020
在Android Studio上，我们会使用gradle构建一个工具包，来管理依赖关系，
this is done using gradle, a build tool kit that manages dependencies and

15
00:01:02,020 --> 00:01:03,830
并允许自定义逻辑。
allows you to define custom build logic.

16
00:01:03,830 --> 00:01:09,660
你可以选择自己建立一个gradle，然后构建IDE。
You can manually start a gradle build in the IDE by selecting make project.

17
00:01:09,660 --> 00:01:13,060
你也可以构建菜单和选项来实现，
You can also do this by going to the build menu and selecting make project from

18
00:01:13,060 --> 00:01:16,980
或者你可以使用gradle观察到任何的日志和报错，
there, or you can use the gradle console to observe any logs or

19
00:01:16,980 --> 00:01:22,070
或者打开gradle的任务窗口，查看还在生存周期中的任务。
build errors, or open the gradle tasks window to see any available tasks.

20
00:01:22,070 --> 00:01:24,930
双击任何一个都会执行。这将会在命令行界面工作。
Double clicking on any of them will execute it. This will work from

21
00:01:24,930 --> 00:01:29,270
一旦你进到项目文件夹的根目录下，
the command line too. Once you've navigated to the root of your project folder,

22
00:01:29,270 --> 00:01:34,810
你就可以运行gradle查看所有运行的任务。
you can run gradlew tasks to see all the tasks that you can run. You can learn

23
00:01:34,810 --> 00:01:39,350
你可以通过查看讲师笔记学习到更多关于gradle的知识。
more about gradle by checking out the links in the instructor notes. For now,

24
00:01:39,350 --> 00:01:43,310
现在我们首先是一个Android project，然后建立gradle，
note that we start with the project, which gradle then builds and

25
00:01:43,310 --> 00:01:47,820
在gradle里有转换过的字节代码，外部资源像图片、字符串，
then packages the byte code along with the external resources such as images,

26
00:01:47,820 --> 00:01:52,530
和应用程序包里的UIXML。这构成了APK,
strings, and uixml into an application package. This is called an APK, and

27
00:01:52,530 --> 00:01:57,270
实际上这一个特殊格式的压缩文件。当你准备好APK时,
it's a specially formatted zip file. Once you've got your APK ready to go,

28
00:01:57,270 --> 00:02:02,210
下一步就是，签名还有推送到设备上使用ADB
it's signed and then pushed to the device using the Android Debug Bridge or

29
00:02:02,210 --> 00:02:07,020
如果回到终端，我们可以看见ADB可以让你在任何设备上与程序交互、调试，
ADB. If we return to the terminal, you can see that ADB lets you interact and

30
00:02:07,020 --> 00:02:10,810
不管是虚拟机还是物理机。比如像上传、下载文件，
debug apps on any device, physical or virtual. Things like pushing and

31
00:02:10,810 --> 00:02:13,730
输出日志，
pulling files, viewing logcat output, or

32
00:02:13,730 --> 00:02:19,280
甚至运行一个远程的shell。一旦 APK 中发现 android's GDO 已安装 ADB，
even running a remote shell. So once Android's GDO has ADB installed the APK,

33
00:02:19,280 --> 00:02:23,410
它将ADB再次发送远程shell命令，
it uses ADB again to launch the app by sending a stock command via the remote

34
00:02:23,410 --> 00:02:27,430
通过识别您的package和class name来启动应用程序。
shell, by identifying the package and class name of your main activity.

