1
00:00:00,410 --> 00:00:04,200
让我们来谈谈有关权限的问题  当每个应用程序的APK被安装的时候
Let's talk about permissions, when each app APK is installed,

2
00:00:04,200 --> 00:00:07,290
它被给予了它自己的特有的Linux用户ID
it's given it's own unique Linux user ID. And each

3
00:00:07,290 --> 00:00:10,175
并且每个应用都运行在自己的Androi虚拟机实例中
app runs within its instance in the Android Virtual machine.

4
00:00:10,175 --> 00:00:16,946
因此每个应用程序是完全被沙箱隔离的
[SOUND] As a result each app is completely sand boxed.

5
00:00:19,831 --> 00:00:23,051
它的文件处理和其他的资源是其他应用程序不能访问的
Its files processes and other resources are inaccessible

6
00:00:23,051 --> 00:00:26,110
这个沙箱的运作方法确保了在默认情况下
to other apps. This sandboxing approach is used to

7
00:00:26,110 --> 00:00:29,210
没有任何应用程序可以访问到敏感的数据
ensure that by default no app can access sensitive

8
00:00:29,210 --> 00:00:32,250
或执行可能对其他的应用程序  系统  或用户产生
data or perform actions that could adversely impact other

9
00:00:32,250 --> 00:00:36,210
不利影响的操作  比如说像访问互联网
apps, the OS, or users. Things like accessing the

10
00:00:36,210 --> 00:00:39,320
获取用户的地点  读取或修改联系人的数据库
internet, getting the user's location, or reading or modifying

11
00:00:39,320 --> 00:00:42,660
这些操作  比起应用每次访问敏感数据
the contacts database. Rather than asking the user each

12
00:00:42,660 --> 00:00:45,660
的时候都询问一下用户
time an app tries to access something sensitive you

13
00:00:45,660 --> 00:00:48,720
你应该在manifest配置文件中声明你的应用需要的权限
declared permissions that your app requires in it's manifest.

14
00:00:48,720 --> 00:00:52,130
你可以从Android开发者网站上
You can get a list of all of the permission

15
00:00:52,130 --> 00:00:56,090
获取你的应用可能需要的所有权限的列表
your app may require here at the Android developer site.

16
00:00:56,090 --> 00:00:58,390
所以  为什么不请求所有的权限
So, why not just ask for all the permissions and

17
00:00:58,390 --> 00:01:01,320
而再也不用担心权限问题呢  是的  当用户安装
never worry about it again? Well, when users install

18
00:01:01,320 --> 00:01:04,200
你的应用程序的时候  他们会看到这个列出了你申请
your app they greeted with this dialogue which lists all

19
00:01:04,200 --> 00:01:06,645
的所有权限的对话框  这些权限使了用户
of the permissions that you've requested along with the more

20
00:01:06,645 --> 00:01:10,770
更易理解的描述  没有应用程序会在这里说它是黑客专门
user-friendly descriptions. Nothing says this app was built by hackers

21
00:01:10,770 --> 00:01:13,380
用来窃取我数据  抢劫我房子  清空我账户
who want to steal my data, rob my house, clear out my

22
00:01:13,380 --> 00:01:16,560
并且拍摄和分享我的裸露的照片的
bank account, and take and share nude pictures of me like

23
00:01:16,560 --> 00:01:19,250
就比如一个想获取设备上所有权限的天气应用
a weather app that wants access to every permission on the

24
00:01:19,250 --> 00:01:24,100
最好的做法是只请求需要的权限
device. Best practice is to request the absolute minimum of permissions.

25
00:01:24,100 --> 00:01:26,340
每次你需要请求一个新的权限
Every time you need to request a new permission, take it

26
00:01:26,340 --> 00:01:29,390
停下来思考一下  是否有其他的
as a flag to stop and consider if there are other

27
00:01:29,390 --> 00:01:32,970
替代方案可以达到同样的目的  例如
alternatives that might achieve the same goal. For example, using an

28
00:01:32,970 --> 00:01:37,140
使用Intent来启动照相机  而不是直接访问照相机
intent to launch the camera app, rather than accessing the camera, directly.

29
00:01:37,140 --> 00:01:39,550
之后我们会看一些与其他应用程序共享数据的方法
Later, we'll look at ways to share your data with

30
00:01:39,550 --> 00:01:43,370
使用Intent和ContentProvider架设起应用程序沙盒
other apps, using intents and content providers to create bridges

31
00:01:43,370 --> 00:01:46,630
之间的桥梁  你同样可以在这些实例上
between these apps sandboxs. You can declare and use those

32
00:01:46,630 --> 00:01:48,040
声明和使用这些权限
permissions in these instances to

33
00:01:48,040 --> 00:01:51,080
去限制访问用户的敏感信息
similarly restrict access to sensitive information.

