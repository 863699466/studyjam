1
00:00:00,440 --> 00:00:03,790
如果你的回答是异步任务，那么你是正确的
If you answered A sync Task, then you are correct.

2
00:00:03,790 --> 00:00:06,930
为了弄清为什么我们选择异步任务作为答案
To understand why we chose Async Task as the answer,

3
00:00:06,930 --> 00:00:09,900
我们可以查阅一下开发者文档
we can check the developer documentation. In this API

4
00:00:09,900 --> 00:00:13,670
在API指南的进程与线程部分，滚动到
guide on processes and threads, we can scroll to the

5
00:00:13,670 --> 00:00:16,730
worker threads这一段。如果你想现在
Worker threads section. Right away, if you want to follow

6
00:00:16,730 --> 00:00:20,810
就去查阅，链接就在底部了。
along, the link is included below. Say, for example, that

7
00:00:20,810 --> 00:00:23,170
比如，你想从网络上
you want to download an image from the network

8
00:00:23,170 --> 00:00:26,040
下载一张图片然后更新UI
at this URL and then you want to update the

9
00:00:26,040 --> 00:00:30,020
来显示这个图片，那好，创建你自己的下载
UI so that it displays this bitmap. Well, creating

10
00:00:30,020 --> 00:00:32,250
图片的线程是有价值的选项
your own thread to download the image is a

11
00:00:32,250 --> 00:00:35,170
但是这样会很多额外的开销
valid option, but there's a lot of overhead to

12
00:00:35,170 --> 00:00:38,790
用来保证你的应用线程安全
handle in making you app actually thread safe. After

13
00:00:38,790 --> 00:00:41,750
下载好图片后，不能直接从后台线程里
you download your image, you cannot directly update the

14
00:00:41,750 --> 00:00:45,070
更新UI。然而，Android有一些
UI from a background thread. However, Android has several

15
00:00:45,070 --> 00:00:47,500
选项，可以从其它线程
options to run code that manipulates the UI to

16
00:00:47,500 --> 00:00:51,280
操作UI线程。在这个例子里
run from other threads. In this example, yet another

17
00:00:51,280 --> 00:00:54,220
另外一个runnable已经被创建
runnable is created to get the bitmap result back onto

18
00:00:54,220 --> 00:00:57,810
这个runnable用来返回图片给主线程,更新ImageView
the main thread to update the image view. This solution

19
00:00:57,810 --> 00:01:00,220
这个解决方案稍微有些麻烦，因为你必须管理两个runnable
is a little cumbersome because you have to manage two

20
00:01:00,220 --> 00:01:04,099
为了抽离这种复杂性
runnables here. To abstract away this complexity we can use

21
00:01:04,099 --> 00:01:06,960
我们可以用异步任务，完成后再丢掉它
an async task and then to kick off the async

22
00:01:06,960 --> 00:01:10,400
例如，一旦按钮被点击了
task. For example, when someone clicks a button, then you

23
00:01:10,400 --> 00:01:13,030
你只需要初始化这个任务，然后调用execute函数
just initialize the task, and then you can call execute

24
00:01:13,030 --> 00:01:16,730
再传入它需要的参数
on it, and then pass in any parameters that are needed.

25
00:01:16,730 --> 00:01:19,470
注意，你正在继承一个异步类
Notice that when you're extending the Async class, there's a

26
00:01:19,470 --> 00:01:22,750
有一些你需要指定的属性
couple of generics that you need to specify. The first is

27
00:01:22,750 --> 00:01:24,670
首先是在doInBackground方法里你需要传入类型
the type that will be passed into the do in

28
00:01:24,670 --> 00:01:28,520
这样，如果你想传入一个图片URL，
background method. So, if you want to pass in this image URL

29
00:01:28,520 --> 00:01:31,310
这个URL在这里是一个指定的字符串
that is specified string here and then in doing background

30
00:01:31,310 --> 00:01:34,690
然后在doInBackground里你将得到一个字符串参数
you'll get a string parameter. The second one is for the

31
00:01:34,690 --> 00:01:37,380
第二个是， 你在任务执行的时候得到它的更新进度的类型
type of object that you'll get when you get progress

32
00:01:37,380 --> 00:01:41,670
在这里我们用不到
updates as a task gets executed. We're not using that here,

33
00:01:41,670 --> 00:01:48,000
所以指定为void就可以了
so it's okay to specify that as void. And the third type is type of results

34
00:01:48,000 --> 00:01:52,127
第三个返回结果类型，我们会在onPostExecute函数里把它返回到主线程中
that we'll be sending back to the main thread through the onPostExecute method
