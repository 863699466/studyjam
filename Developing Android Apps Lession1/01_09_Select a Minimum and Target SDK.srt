1
00:00:00,310 --> 00:00:04,858
Android 1.0在2008年发布了  在仅仅六年之后
Android 1.0 launched in 2008. And in just the six year since then,

2
00:00:04,858 --> 00:00:09,880
有11个新的平台发布  在Android开发方面
there has been 11 new major platform releases. On the Android developer side,

3
00:00:09,880 --> 00:00:13,460
我们在一个给定的图标中展示了数量相对活跃的Android设备运行的平台版本
we show the relative number of active Android devices running a given platform

4
00:00:13,460 --> 00:00:18,314
饼图真的是非常棒的  但是对于我们的目的来说
version in this pie chart, because pie charts are awesome. For our purposes

5
00:00:18,314 --> 00:00:22,700
你真的最好还是考虑看一下这个直方图  如果你眯着眼睛
though, you're really better off looking at this as a histogram. If you squint,

6
00:00:22,700 --> 00:00:27,715
你大约可以看到一个模糊的钟形曲线  最早的Android版本是在这里
you can almost see a vaguely bell-shaped curve, with the oldest releases here at

7
00:00:27,715 --> 00:00:31,858
它们的知名度随着设备的升级和更换而逐渐下降
the left, their popularity dropping off as devices are upgraded or

8
00:00:31,858 --> 00:00:36,100
在中间的是在设备中所占比例最大的
replaced. The largest proportion of devices are here in the middle,

9
00:00:36,100 --> 00:00:40,020
代表着这些设备已经两岁啦  而最新的平台
representing devices about two years old. And the newest platforms,

10
00:00:40,020 --> 00:00:43,470
日益普及的新手机在发布和升级
gaining popularity as new phones are released or upgrades go out,

11
00:00:43,470 --> 00:00:47,523
在它的右侧  所以考虑到这一点  最低SDK作为您的最低限度
are here on the right. So with that in mind, the Min SDK acts as your low-pass

12
00:00:47,523 --> 00:00:51,980
Google Play将不会在一台比最低SDK版本还低的设备平台上显示您的应用程序
filter. Google Play won't show your app on devices running a platform version

13
00:00:51,980 --> 00:00:56,660
所以我们为什么不只设置一项最低SDK而支持所有的设备呢
lower than its minimum SDK version. So why not just set the Min SDK to one and

14
00:00:56,660 --> 00:01:01,400
一般来说  你想要让你的目标SDK满足尽可能多的用户
support everyone? Generally, you'll want to target as many users as you can, but

15
00:01:01,400 --> 00:01:05,040
但要与一些旧的版本进行匹配是要付出代价的
there's a cost associated with supporting some of these older versions.

16
00:01:05,040 --> 00:01:07,830
比如像兼容不可用
Things like creating different execution paths around deprecated or

17
00:01:07,830 --> 00:01:12,730
或更新的API或者针对不同功能进行不一样的展示效果及用户体验
update APIs or presenting a different UX to devices with different features. So

18
00:01:12,730 --> 00:01:16,360
所以你需要平衡扩展你的应用的受众所付出的代价是否值得
you need to balance the opportunity of expanding your audience with the cost of

19
00:01:16,360 --> 00:01:21,480
同时  记住每个版本都介绍了它的新的API和硬件支持
supporting those new users. Also, remember that each release introduced with it

20
00:01:21,480 --> 00:01:24,900
因此  把您的应用程序在不支持
new APIs and hardware support. So it may not make sense to

21
00:01:24,900 --> 00:01:28,190
您的最小功能集的设备上运行是没有意义的
make your app available to devices that don't support your minimum feature set.

22
00:01:29,220 --> 00:01:33,430
通过比较  目标SDK不是一个最高限度
By comparison, the Target SDK is not a high-pass filter.

23
00:01:33,430 --> 00:01:36,460
它只是用来声明你所测试过的平台的版本
It's used only to declare which platform version you've tested on.

24
00:01:37,628 --> 00:01:41,060
针对一个特定的API的应用将继续在后续的版本中向前兼容
An app targeted to a certain API will continue to be forward compatible on

25
00:01:41,060 --> 00:01:45,650
该平台使用目标SDK的兼容模式当
future releases. The platform uses the Target SDK values in case a future

26
00:01:45,650 --> 00:01:50,040
后续的平台发生重大变更
platform makes a significant change to expected behavior. This ensures your app

27
00:01:50,040 --> 00:01:54,620
这样可以确保您的应用程序在用户的手机升级之后仍然可用
doesn't break when a user's phone gets upgraded. If you're developing a new app,

28
00:01:54,620 --> 00:01:58,630
如果你正在开发一个新的应用程序  没有任何理由去拒绝使用最新版本Android来作为你的目标SDK
there's really no reason to target anything but the latest Android version. And

29
00:01:58,630 --> 00:02:02,340
一旦你的应用程序发布  作为重要的一点是更新你的目标SDK
once your app has been released, make it a point to update your Target SDK and

30
00:02:02,340 --> 00:02:06,610
当新的平台发布的时候越快测试越好
test as soon as possible when new platform releases roll out so you can take

31
00:02:06,610 --> 00:02:10,570
这样  你就可以利用每一个新平台的特点来优化和改进您的应用
advantage of every new platform optimization and improvement it has to offer.

