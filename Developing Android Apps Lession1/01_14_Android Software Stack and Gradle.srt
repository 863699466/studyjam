1
00:00:00,680 --> 00:00:04,090
简单地单击就能让你的程序运行在模拟器上，
The simplicity of hitting run and having your app appear on an emulator,

2
00:00:04,090 --> 00:00:08,335
这其中隐藏了很多复杂的细节。别忘了，Android系统由多个层次组成
hides a lot of complexity. Remember that Android is a full software stack.

3
00:00:08,335 --> 00:00:12,190
Adspace 是 Linux 内核，
Adspace is a Linux Kernel,

4
00:00:12,190 --> 00:00:16,329
负责底层任务，像是硬件总线和面板管理
which handles low level tasks like hardware fibers and panel management.

5
00:00:16,329 --> 00:00:20,757
在它上面是C/C++核心库，例如 Libsc SQLite 
On top of that, are some core C and C plus plus libraries like Libsc and

6
00:00:20,757 --> 00:00:25,920
和 Android Runtime。 这里面包含一些很酷的库
SQLite and the Android Runtime. That includes cool Android libraries and

7
00:00:25,920 --> 00:00:31,240
和Android的虚拟机，Dalvik或者最近出的ART
the Android virtual machines, Dalvik or more recently ART. Your apps run

8
00:00:31,240 --> 00:00:36,000
你的App在它自己的虚拟机实例上运行
within its own instance of the VM using the classes and services provided here

9
00:00:36,000 --> 00:00:40,570
使用着应用程序框架提供的类和服务  在这些的上面 是应用程序层
in the application framework. On top of that, sits the application layer,

10
00:00:40,570 --> 00:00:44,970
包含你的应用程序和其他所有装在这个设备上应用
which includes your app and every other app that's installed on the device. So,

11
00:00:44,970 --> 00:00:48,800
所以 当你在Android Studio点击运行你的程序时 首先是
when you hit Run in Android Studio, the first thing that happens is your code

12
00:00:48,800 --> 00:00:53,320
你的代码会被编译成字节码 这样就可以在Android虚拟机上运行了
gets compiled into byte code that can be run in the Android Virtual Machine.

13
00:00:53,320 --> 00:00:58,030
然后这个字节码会被安装到设备上
That then gets installed onto the device. In Android Studio,

14
00:00:58,030 --> 00:01:02,020
Android Studio使用gradle来帮你做这些 例如管理依赖关系
this is done using gradle, a build tool kit that manages dependencies and

15
00:01:02,020 --> 00:01:03,830
你也可以自定义gradle的编译配置
allows you to define custom build logic.

16
00:01:03,830 --> 00:01:09,660
你可以选择 Make Project 来手动地开始gradle编译
You can manually start a gradle build in the IDE by selecting make project.

17
00:01:09,660 --> 00:01:13,060
也可以选择编译菜单中的 Make Project
You can also do this by going to the build menu and selecting make project from

18
00:01:13,060 --> 00:01:16,980
你可以用gradle控制台看看有没有日志或者编译错误
there, or you can use the gradle console to observe any logs or

19
00:01:16,980 --> 00:01:22,070
还可以打开gradle任务窗口看看有哪些任务
build errors, or open the gradle tasks window to see any available tasks.

20
00:01:22,070 --> 00:01:24,930
双击他们就能执行 也可以用命令行执行
Double clicking on any of them will execute it. This will work from

21
00:01:24,930 --> 00:01:29,270
当你进入你的项目的根目录时
the command line too. Once you've navigated to the root of your project folder,

22
00:01:29,270 --> 00:01:34,810
可以用 ./gradlew tasks 查看所有能运行的任务
you can run gradlew tasks to see all the tasks that you can run. You can learn

23
00:01:34,810 --> 00:01:39,350
你可以看看笔记里的链接学习到更多关于gradle的知识
more about gradle by checking out the links in the instructor notes. For now,

24
00:01:39,350 --> 00:01:43,310
现在我们首先建立一个Android项目 随后gradle会
note that we start with the project, which gradle then builds and

25
00:01:43,310 --> 00:01:47,820
将字节码和其他资源（如图片、字符串、UI的XML文件）
then packages the byte code along with the external resources such as images,

26
00:01:47,820 --> 00:01:52,530
一起编译打包到一个APK应用程序包里 
strings, and uixml into an application package. This is called an APK, and

27
00:01:52,530 --> 00:01:57,270
APK包其实是一个特殊格式的zip文件 当准备好APK包后
it's a specially formatted zip file. Once you've got your APK ready to go,

28
00:01:57,270 --> 00:02:02,210
给它签上名 然后通过Android Debug Bridge（ADB）推送到设备上
it's signed and then pushed to the device using the Android Debug Bridge or

29
00:02:02,210 --> 00:02:07,020
我们可以通过终端界面用ADB和设备交互、debug 
ADB. If we return to the terminal, you can see that ADB lets you interact and

30
00:02:07,020 --> 00:02:10,810
物理的设备和虚拟设备都可以  还可以做例如推进、拉出文件
debug apps on any device, physical or virtual. Things like pushing and

31
00:02:10,810 --> 00:02:13,730
查看logcat输出
pulling files, viewing logcat output, or

32
00:02:13,730 --> 00:02:19,280
甚至运行一个远程的shell 一旦Android的GDO被ADB安装了APK
even running a remote shell. So once Android's GDO has ADB installed the APK,

33
00:02:19,280 --> 00:02:23,410
它会再次用ADB发送一个命令 通过远程shell来启动这个App
it uses ADB again to launch the app by sending a stock command via the remote

34
00:02:23,410 --> 00:02:27,430
命令中包含你的主Activity的包名和类名
shell, by identifying the package and class name of your main activity.
