1
00:00:01,030 --> 00:00:04,939
非准确重复定时器(Alarm)虽然比准确重复定时器要好一些，
Inexact repeating alarms. Infinitely better than exact repeating alarms, but

2
00:00:04,939 --> 00:00:08,690
但是它仍然不是理想的。任何类型的重复定时器的问题是
still far from ideal. The problem with any kind of repeating

3
00:00:08,690 --> 00:00:11,350
它仍然是轮询服务器来检查更新
alarm is that it's still polling your server to check

4
00:00:11,350 --> 00:00:14,530
所以你轮询的越频繁
for updates. So the more frequently you poll, the fresher the

5
00:00:14,530 --> 00:00:17,130
你获得的数据也更新，但是电池损耗就越厉害
data you can display, but the higher the cost in

6
00:00:17,130 --> 00:00:20,740
你可以为了节省电量减缓轮询的频率
battery life. You can pull as frequently to conserve battery but

7
00:00:20,740 --> 00:00:23,730
但这意味着你获取的数据内容过时的更快
that just means your content will be stale for longer.

8
00:00:23,730 --> 00:00:26,530
你也可以让用户决定自己更新频率
You could just let the user decide the update frequency themselves,

9
00:00:26,530 --> 00:00:29,140
但这样做的话，程序就不再那么充满魔力了
but then you lose the magic. If only there was

10
00:00:29,140 --> 00:00:32,820
是否可以有更好的方式呢？
a better way. Is such a thing possible? Yes it

11
00:00:32,820 --> 00:00:36,440
是的。谷歌云存储消息让您的服务器可以
is. Google cloud messaging lets your server notify your app

12
00:00:36,440 --> 00:00:39,340
在有数据需要下载的时候直接通知应用程序
directly when there's data ready to be downloaded. Or it

13
00:00:39,340 --> 00:00:41,550
甚至它本身可以将新数据放入信息负载中
can even include the new data in the message payload

14
00:00:41,550 --> 00:00:45,300
使用谷歌云存储消息,您可以通过谷歌的云
itself. Using Google Cloud Messaging, you can send messages from

15
00:00:45,300 --> 00:00:48,260
从您的服务器上发送消息到安装了你的应用程序的设备上
your server to any installed instance of your app via

16
00:00:48,260 --> 00:00:51,650
这样一来，你可以不用轮询了
the Google Cloud. As a result, you can stop polling,

17
00:00:51,650 --> 00:00:54,630
这就立竿见影的提高了电池续航，也提升了
which will immediately improve battery life and also improve the

18
00:00:54,630 --> 00:00:58,036
你的应用内容的新鲜度。同时，
freshness of your app. And instead, rely on your server

19
00:00:58,036 --> 00:01:01,670
依赖服务器通知客户端的方式。
notifying clients when there's data to sync. These messages can

20
00:01:01,670 --> 00:01:04,785
这些消息可以非常简单，只触发同步适配器
be simple tickles, that trigger a sync adapter by notifying your

21
00:01:04,785 --> 00:01:07,350
来通知应用程序有新数据或需要下载
app that there is new data or need to download.

22
00:01:07,350 --> 00:01:10,560
也可以将新数据放入消息的负载中发送出去。
Or you can include the new data within the message payload.

23
00:01:10,560 --> 00:01:14,140
在sunshine这个例子里，我们使用了其它的服务器
In the sunshine example, we're using someone else's server. But

24
00:01:14,140 --> 00:01:17,010
但即便如此，创建自己的中间层监听数据变化
even then, it may make sense to create your own middle

25
00:01:17,010 --> 00:01:20,780
来通知已安装的应用程序实例也是很有意义的
tier that pulls the source and notifies your installed app instances

26
00:01:20,780 --> 00:01:23,650
现在我们不会在这节课中设置一个服务器
when it notices a change. Now we're not going to set up a

27
00:01:23,650 --> 00:01:26,260
但是你可以从开发者指南的教程网站上
server in this lesson, but you can see the full details for

28
00:01:26,260 --> 00:01:30,040
看到使用谷歌云存储消息传递的全部细节
using Google cloud messaging from the developer guide linked to instructor nets.

