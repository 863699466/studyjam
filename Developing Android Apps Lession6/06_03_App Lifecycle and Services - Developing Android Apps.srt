1
00:00:00,350 --> 00:00:02,050
回顾第四课，我们学到了
Back in lesson four, we learned that the

2
00:00:02,050 --> 00:00:04,990
Android·运行时会杀掉不可见的activity
Android Runtime will kill apps with no visible activities,

3
00:00:04,990 --> 00:00:07,300
来给前台可见的应用释放资源
in order to free resources needed by the foreground

4
00:00:07,300 --> 00:00:10,110
但是，如果我们的应用即使在不可见时
app. But what if your app has tasks that

5
00:00:10,110 --> 00:00:12,820
也需要继续任务呢？
need to continue when the activity isn't visible, things

6
00:00:12,820 --> 00:00:17,150
比如下载文件，上传照片，播放音乐
like downloading files, uploading photos, or playing music? Well,

7
00:00:17,150 --> 00:00:21,357
有一个应用程序的组件就是为这种情况而生的——Services
there's an application component for that. Services. We've already

8
00:00:21,357 --> 00:00:23,224
我们已经介绍了activity,content provider,broadcast 
introduced Activities, Content Providers,

9
00:00:23,224 --> 00:00:25,230
recriver还有intent。
Broadcast Receivers and Intents. Services,

10
00:00:25,230 --> 00:00:29,500
Service（服务）就是Android组件的最后一部分
are the final piece to the Android app component

11
00:00:29,500 --> 00:00:33,369
开始一个服务像极了activity，
puzzle. You start services much like you do activities, by

12
00:00:33,369 --> 00:00:36,880
为startService方法传递一个intent参数就行了
passing in an intent to a Start Service call.

13
00:00:36,880 --> 00:00:39,212
你也可以用同样的办法停止它
And you can stop services the same way, by calling

14
00:00:39,212 --> 00:00:40,930
调用stopService方法，传入你想停止的服务的名字
Stop Service and passing in the name of the

15
00:00:40,930 --> 00:00:44,770
不同于activity,服务没有用户界面
service you want to stop. Unlike activities, services have no

16
00:00:44,770 --> 00:00:47,777
他们运行时，比后台activity有更高的优先级
user interface and they run at a higher priority than

17
00:00:47,777 --> 00:00:50,490
这就意味着运行着服务的应用程序
background activities. This means that an app with a running

18
00:00:50,490 --> 00:00:52,690
很少在运行时
service is less likely to be killed by the run

19
00:00:52,690 --> 00:00:55,620
为了释放资源给前台可见activity而被杀掉
time, in order to free resources for the foreground activities.

20
00:00:55,620 --> 00:00:58,350
实际上，如果服务在应用内部停止它之前
In fact, by default, the system will attempt to restart

21
00:00:58,350 --> 00:01:01,180
就被中断的话，系统默认会重启这个服务
services that are terminated before they are stopped from within

22
00:01:01,180 --> 00:01:05,129
这是它简单的生命周期的映射。
the app. This is reflected in this simplified life cycle.

23
00:01:05,129 --> 00:01:09,050
和activity相比，服务被设计成一个用来执行长时间操作的
Compared to Activities, Services are designed to execute longer running

24
00:01:09,050 --> 00:01:12,340
不应被中断的任务。通常，你只需要
tasks that shouldn't be interrupted. Typically, you'll only need to

25
00:01:12,340 --> 00:01:15,900
重写onStartCommad方法，这是你希望执行后台任务的地方
override the onStartCommad handler, which is where you begin the background

26
00:01:15,900 --> 00:01:18,860
但是请注意
task you wish to execute. But notice that there are

27
00:01:18,860 --> 00:01:21,880
并不存在一个可覆盖的方法，来监控应用状态的改变，从而反映
no handlers for monitoring changes in state, to reflect the

28
00:01:21,880 --> 00:01:24,600
应用是否被移到后台去了。这是因为
app moving to the background. This is because the running

29
00:01:24,600 --> 00:01:27,250
运行中的服务自己给framework层发送了一个信号
service itself sends a signal to the framework that the

30
00:01:27,250 --> 00:01:30,930
指出这个运行了服务的应用应该比
containing app should be considered higher priority than other apps

31
00:01:30,930 --> 00:01:34,180
其他后台未运行服务的程序拥有更高优先级
in the background that don't have running services. In some

32
00:01:34,180 --> 00:01:37,150
一些情况下，你的服务可能执行一个没有交互界面的任务
cases your service may performing a task, that while not

33
00:01:37,150 --> 00:01:41,450
没有用户操作的话不能被中断
having UI, can't be interrupted without interfering with the user experience.

34
00:01:41,450 --> 00:01:43,980
比如，播放音乐或者汽车导航
For example, playing music or helping with in car

35
00:01:43,980 --> 00:01:47,720
这些情况下，你的服务应该
navigation. In these cases, you can indicate that your

36
00:01:47,720 --> 00:01:49,410
通过调用startForeground
server should be considered to be running in the

37
00:01:49,410 --> 00:01:54,530
来声明它要运行在前台。你会注意到这个调用是在通知里完成的
foreground by calling startForeground. You'll notice that this call takes

38
00:01:54,530 --> 00:01:57,330
这将会被一直显示，不能取消
in a notification. This will be displayed, and can't

39
00:01:57,330 --> 00:01:59,850
直到任务停止或者你调用 stopForeground方法
be dismissed until the service has stopped, or you

40
00:01:59,850 --> 00:02:03,680
后面你会跟着Dan学到更多关于通知的部分
call stopForeground. You'll learn more about notifications a little

41
00:02:03,680 --> 00:02:06,600
但现在，记住前台服务和前台activity有
later, with Dan. But for now, note that a foreground

42
00:02:06,600 --> 00:02:10,440
同样的优先级就好了
service runs at the same priority as a foreground

43
00:02:10,440 --> 00:02:13,330
这会使得它不可能被运行时引擎
activity. Making it nearly impossible for the run time

44
00:02:13,330 --> 00:02:15,800
为了释放更多的资源而杀掉
to kill in order to free resources. Now, you

45
00:02:15,800 --> 00:02:18,460
现在你可能会考虑，我可以用生命周期
may be thinking to yourself, I could save a lot

46
00:02:18,460 --> 00:02:21,020
保持一些麻烦的处理，只创建长时间运行，
of trouble dealing with life cycles, just by creating

47
00:02:21,020 --> 00:02:24,830
或者前台服务就好了
long running, or even foreground services. Well, I grew up

48
00:02:24,830 --> 00:02:27,260
嗯...我生长在澳大利亚的海滨，所以
along the coast in Australia, so I learned young

49
00:02:27,260 --> 00:02:32,160
我自小就明白了逆着潮流游泳既费力而且最终都是徒劳。
that swimming against the current is exhausting and ultimately futile.

50
00:02:32,160 --> 00:02:34,310
这种情况下，意味着会让系统管理资源变得
In this case, that means making it more difficult

51
00:02:34,310 --> 00:02:37,060
更加困难，最后导致
for the system to manage resources, ultimately leading to a

52
00:02:37,060 --> 00:02:40,780
更差的用户体验。顺着潮流游泳。
worse user experience. Swim with the current. Use foreground

53
00:02:40,780 --> 00:02:45,500
前台服务只在绝对需要的时候才运行
services only when and for as long as absolutely necessary,

54
00:02:45,500 --> 00:02:49,020
并且在不需要的时候要尽快关闭它
and stop all services as quickly as possible. It's

55
00:02:49,020 --> 00:02:52,520
注意，就像activity和receiver一样，服务同样运行在主线程
also important to note that like activities and receivers, services

56
00:02:52,520 --> 00:02:54,490
所以你需要
run on the main thread. So you'll need to

57
00:02:54,490 --> 00:02:57,620
用后台线程或者异步任务来执行
use a background thread or a sync task to execute

58
00:02:57,620 --> 00:02:59,190
你希望在服务里处理的长时间运行的任务
the long running tasks you wish to do

59
00:02:59,190 --> 00:03:02,410
为了简单
within your service. To make life easier, you can

60
00:03:02,410 --> 00:03:05,300
你可以使用intent service类
use the intent service class. Which implements the most

61
00:03:05,300 --> 00:03:07,920
它实现了最通用的实践模式
common best practice pattern, for using intents, which are

62
00:03:07,920 --> 00:03:10,640
来在服务里使用intent。它创建了一个intent队列
executed within a service. It creates a queue of

63
00:03:10,640 --> 00:03:14,630
传入的intent在startService被调用时入队
incoming intents, passed in when start service is called.

64
00:03:14,630 --> 00:03:17,970
这样，在你的IntentService实现类中的onHandleIntent方法里
These are then, processed sequentially on a background thread,

65
00:03:17,970 --> 00:03:22,970
这些intent就在后台线程中按顺序一一执行了
within the onHandleIntent handler, within your intent service implementation.

66
00:03:22,970 --> 00:03:25,840
当是队列空了的时候，服务自己会终止
When the queue is empty the service self terminates

67
00:03:25,840 --> 00:03:28,650
直到接收到新的intent，进程才再次开启
until a new intent is received and the process begins

68
00:03:28,650 --> 00:03:31,640
服务是一个强大的工具
again. Services are a powerful tool and it's important

69
00:03:31,640 --> 00:03:34,980
理解怎么运用好它们是很重要的
to understand how you can use them but in practice

70
00:03:34,980 --> 00:03:37,290
但是在实践中，总会有一个可选的开发框架来替换你自己的
there's often a framework alternative to rolling your own

71
00:03:37,290 --> 00:03:40,770
服务实现。不管它是一个后台任务的intent service
service implementation. Whether that be an intent service for executing

72
00:03:40,770 --> 00:03:43,810
还是一个你将在后面学到的同步适配器
background tasks or the sync adapter which you'll learn about

73
00:03:43,810 --> 00:03:47,620
它可以完美地执行后台数据同步
later in this lesson. Perfect for performing background data synchronization

