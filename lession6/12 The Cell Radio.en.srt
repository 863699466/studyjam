1
00:00:00,670 --> 00:00:03,730
你的设备的无线电传输大概是这个样子
The cell radio in your device operates roughly like this.

2
00:00:03,730 --> 00:00:06,320
从初始的空闲状态到能传输数据的状态
From an initial idle state, it takes a couple of seconds

3
00:00:06,320 --> 00:00:09,120
要花费大概2秒钟
to turn on until it can start transmitting. That kind of

4
00:00:09,120 --> 00:00:12,430
经常触发这个延迟会降低用户体验
latency makes for a sucky web browsing experience. So rather than

5
00:00:12,430 --> 00:00:15,850
所以比起来不传输数据立马回到空闲状态，状态机采用了
going back to idle, state machine stays on at full power

6
00:00:15,850 --> 00:00:18,730
在这之后仍然处于满功率状态一段时间，通常是5~10秒
for a certain amount of time. Typically, around five to ten

7
00:00:18,730 --> 00:00:22,940
然后下降到一个较低功率的中间状态
seconds before dropping to an intermediate low power mode that uses

8
00:00:22,940 --> 00:00:25,860
这时候用的电也比满功率少，要回到满功率
less battery than full power, and has lower latency to return

9
00:00:25,860 --> 00:00:28,661
所需的延迟时间也比空闲状态少
to full power than the standby mode. If a new

10
00:00:28,661 --> 00:00:31,370
如果新开启了一个网络连接，状态机会回到满功率状态
transfer is initiated, the radio will be promoted back to

11
00:00:31,370 --> 00:00:34,560
如果之后30秒~1分钟的时间没事可做
full power mode. And if nothing happens for another period

12
00:00:34,560 --> 00:00:38,020
of time, typically around 30 seconds to a minute, it'll

13
00:00:38,020 --> 00:00:41,690
它会回到空闲状态。确切的延迟和后续时间（tail time）
drop back to standby. The exact latency and tail times

14
00:00:41,690 --> 00:00:45,000
不同的载体网络不同，甚至不同国家和州都不同
varies between carriers, and even in carriers between states and

15
00:00:45,000 --> 00:00:47,910
因为他们都试着平衡两者，使得有最低延迟和
countries, as they try to balance low latency with longer

16
00:00:47,910 --> 00:00:51,380
最长的电池寿命，这些都要考虑到
battery life based on factors like cell congestion and typical

17
00:00:51,380 --> 00:00:54,830
像网络状况和拥挤程度诸如此类。所以确切的时间是变化的
prevailing network conditions. So the exact timings vary. How

18
00:00:54,830 --> 00:00:58,630
那么我们怎么优化我们的传输频率呢？
do we optimize our transfer frequency? Ultimately, it doesn't matter

19
00:00:58,630 --> 00:01:01,120
其实这并不需要知道确切的时间值
what the specific timings are. You just need to

20
00:01:01,120 --> 00:01:03,712
你只需要知道网络是在试图去
understand that the network is going to attempt to balance

21
00:01:03,712 --> 00:01:07,740
平衡低延迟和高电池寿命。对于我们来说
low latency with high battery life. For us, when

22
00:01:07,740 --> 00:01:10,650
计划数据传输的时候
it comes to planning out data transfers, we really like

23
00:01:10,650 --> 00:01:13,960
我们通常是在这
to be somewhere around here,. Now, if we return

24
00:01:13,960 --> 00:01:16,550
我们回到无线电波状态机看看
briefly to the cell radio state machine, we know that

25
00:01:16,550 --> 00:01:19,370
每当我们开始数据传输，这个无线电
every time we perform a data transfer, the radio will

26
00:01:19,370 --> 00:01:22,550
会至少保持5秒钟的满功率后续时间
stay active for at least another five seconds of full tail

27
00:01:22,550 --> 00:01:26,260
和30秒~1分钟的低功率的后续时间
time, and anywhere from 30 seconds to a minute at low

28
00:01:26,260 --> 00:01:30,010
才能回到空闲状态。这意味着每当你
power before it finally returns to standby. That means every time

29
00:01:30,010 --> 00:01:32,830
开启一个新的传输，你至少要开启无线电20秒
you initiate a transfer, you're powering the cell radio up for

30
00:01:32,830 --> 00:01:35,060
我们来看看这对App有什么影响
at least 20 seconds. So let's take a look at how

31
00:01:35,060 --> 00:01:38,660

that affects an app, using the little cookie approach. An app

32
00:01:38,660 --> 00:01:41,550
这样的App消耗电量很快
like this can drain the battery without even having to transfer

33
00:01:41,550 --> 00:01:44,720
这些小峰表示
much data. Each of these small peaks is

34
00:01:44,720 --> 00:01:47,270
App每隔15秒把分析数据传回服务器
an app pinging its analytics back to the server,.

35
00:01:47,270 --> 00:01:50,940
这些大峰表示
In this case, every 15 seconds. These logi-peaks represent

36
00:01:50,940 --> 00:01:54,540
用户交互引起的间断的数据传输
intermittent data transfers based on user interaction. For example,

37
00:01:54,540 --> 00:01:56,590
比如用户可能在看餐馆的列表
they may be viewing a restaurant listing or looking

38
00:01:56,590 --> 00:01:59,900
或者查看明天的天气预报。下面，我们画出了
at tomorrow's weather forecast. Beneath it, we've graphed how

39
00:01:59,900 --> 00:02:03,230
无线状态图。蓝色的表示数据传输
this affects the radio state. The blue shows active

40
00:02:03,230 --> 00:02:07,800
红色的表示处于满功率
data transfers. The red, the radio in full power.

41
00:02:07,800 --> 00:02:12,090
黄色表示处于低功率。中间的缺口，
And yellow showing low power mode. The gaps in between, if

42
00:02:12,090 --> 00:02:16,340
如果有的话，代表空闲状态
there were any, indicate when the radio was idle. So while

43
00:02:16,340 --> 00:02:19,370
所以当这个App运行时，无线电状态为空闲状态的时间
this app is running, what is the percentage of time that

44
00:02:19,370 --> 00:02:22,180
占百分比多少？
the cell radio is able to go back to its idle state?

