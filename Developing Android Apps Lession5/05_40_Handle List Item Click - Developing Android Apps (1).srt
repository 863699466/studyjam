1
00:00:00,070 --> 00:00:02,090
这两个窗格已经显示在平板上了 
Once the two panes
are showing up on the tablet,

2
00:00:02,090 --> 00:00:04,450
我们来改变处理点击事件的代码
let's modify our code to
handle the list item click.

3
00:00:04,450 --> 00:00:07,770
在手机上，如果forecastFragment里的列表项被点击了
On the phone, if an item is
clicked in the forecast fragment,

4
00:00:07,770 --> 00:00:09,540
然后我们就要载入detail_activity
then we must launch the detail activity.

5
00:00:09,540 --> 00:00:13,220
在平板用户界面上，一旦列表项被点击了
On the tablet UI, once an item in
the forecast fragment is clicked,

6
00:00:13,220 --> 00:00:17,230
我们要通知main_activity替换detail_fragment
we notify the main activity which goes
and replaces the detail fragment.

7
00:00:17,230 --> 00:00:19,680
之所以这两个fragment互相没有关联的原因是
The reason the two fragments
don't talk to each other

8
00:00:19,680 --> 00:00:22,480
我们希望保持彼此抽象
is because we want to maintain
abstraction from each other.

9
00:00:22,480 --> 00:00:25,730
如果forecast list fragment开始假设 detailed fragment 
If the forecast list fragment started
assuming that the detailed fragment was

10
00:00:25,730 --> 00:00:28,950
总是在它的右边，那么假设将会被打破
always right next to it, then the
assumption would break, for example on

11
00:00:28,950 --> 00:00:32,600
比如在手机上，data fragment并不是在main activity里
the phone, where the data fragment
is not inside the main activity.

12
00:00:32,600 --> 00:00:35,210
因此，fragment必须通过它的activity
Therefore, a fragment must
go through it's activity.

13
00:00:35,210 --> 00:00:38,920
一个activity必须知道如何把事件分发到其它的fragment里
An activity must know how to dispatch
the event to the other fragments.

14
00:00:38,920 --> 00:00:41,000
记住，一个fragment不必总是
Keep in mind that a fragment
doesn't always has to be

15
00:00:41,000 --> 00:00:42,350
用在同一个activity里
used in the same activity.

16
00:00:42,350 --> 00:00:45,310
为了让forecast fragment与main activity建立联系
In order for the forecast fragment
to talk to the main activity,

17
00:00:45,310 --> 00:00:47,140
我们应该创建一个回调接口
we should create a callback interface.

18
00:00:47,140 --> 00:00:50,390
这样就更好的判断fragment一直在
It's a better assumption to say that
the fragment will always be within

19
00:00:50,390 --> 00:00:52,970
实现了这个回调的activity中
an activity that
implements this callback;

20
00:00:52,970 --> 00:00:56,890
然后就可以确定forecast fragment一直在main_activity里
then to say that the forecast fragment
will always be inside the main activity.

21
00:00:56,890 --> 00:00:59,660
一个fragment怎么可以被用于两个不同的activity里，
The detail fragment is a good
example of how a fragment can

22
00:00:59,660 --> 00:01:03,240
detail_fragment就是一个很好的例子
be used in two different activates, the
main activity and the detail activity.

23
00:01:03,240 --> 00:01:06,628
所以不要依赖getActivity函数来返回一个特定activity类
So don't rely on get activity
returning a specific activity class.

24
00:01:06,628 --> 00:01:10,732
使用我们提供的依据--这个回调类来通知activity
Using the gist that we provided, use
a callback class to notify the activity

25
00:01:10,732 --> 00:01:12,730
列表项被点击了
that a list item has been selected.

26
00:01:12,730 --> 00:01:15,310
看看item click list listener下面的提示
See the hint below on
the item click list listener.

27
00:01:15,310 --> 00:01:18,620
然后，这个activity既可以加载detail activity
Then, the activity can either
launch the detail activity or

28
00:01:18,620 --> 00:01:22,120
也可以替换detail_fragment,这要看是手机还是平板设备
replace a detail fragment based on
whether it is a phone or tablet.

29
00:01:22,120 --> 00:01:25,300
当你做这个任务的时候，你会陷入一个问题中
When you work on this task you'll
run into an issue of how to pass

30
00:01:25,300 --> 00:01:29,960
就是怎么传递选中项到detail fragment中
the selected items you arrive to the
detail fragment, now your instinct might

31
00:01:29,960 --> 00:01:33,910
现在你的直觉可能是创建一个自定义构造器来传递数据
say to create a custom constructor
where you can pass in the date,

32
00:01:33,910 --> 00:01:37,880
然而，我们一般不会创建自定义的fragment构造函数
however, we don't normally create
custom fragment constructors.

33
00:01:37,880 --> 00:01:41,110
比如，如果你旋转设备，系统不能以正确的参数调用
If you ever rotate the device, for
example, the system can't call

34
00:01:41,110 --> 00:01:43,550
你自定义的构造器
your custom fragment constructor
with the right parameters.

35
00:01:43,550 --> 00:01:46,330
但是，可以使用空的fragment构造器
However, it can use the empty
fragment constructor and

36
00:01:46,330 --> 00:01:49,470
用之前使用的同一个bundle初始化它
initialize it with the same
bundle of arguments used earlier.

37
00:01:49,470 --> 00:01:53,390
为了传递信息到初始化的fragment里，
So to pass information to initialize
a fragment, create a bundle of

38
00:01:53,390 --> 00:01:57,290
创建一个bundle的键值对，然后再给fragment设置属性
key value pairs and then set that
as the arguments on the fragment.

39
00:01:57,290 --> 00:02:01,560
不要把arguments bundle和savedInstanceState bundle弄混了
Don't confuse this arguments bundle
with the savedInstanceState bundle.

40
00:02:01,560 --> 00:02:03,130
一旦fragment被初始化
Once a fragment has been initialized,

41
00:02:03,130 --> 00:02:08,160
你不可以改变其属性，就像这里看到的一样，你只能读取它们
you can't change the arguments, you
can only read from them, as seen here.

42
00:02:08,160 --> 00:02:09,690
另一方面，save state bundle是为了
On the other hand the save
state bundle is for

43
00:02:09,690 --> 00:02:12,750
简化信息，一旦fragment运行起来
storing information once
a fragment has been running, and

44
00:02:12,750 --> 00:02:15,300
你可以将它植入onSaveInstantState函数
you can populate it in the on
save instant state method.

45
00:02:15,300 --> 00:02:18,410
bundle可以在横屏与竖屏间保持状态，
The bundle can preserve state
across orientation changes or

46
00:02:18,410 --> 00:02:20,710
否则fragment或者activity会被系统杀掉
if the fragment or
activity gets killed by the system,

47
00:02:20,710 --> 00:02:24,450
这就是为什么我们要在onCreate或者onCreateView里重新接收它的原因
that's why you receive it back again in
the onCreate or onCreateView methods.

48
00:02:24,450 --> 00:02:27,800
一旦fragment显示在平板上
Once the detail fragment starts
being displayed on the tablet,

49
00:02:27,800 --> 00:02:31,740
我们需要确保位置变化时不能丢失数据
we need to make sure that doesn't get
out of date if the location changes.

50
00:02:31,740 --> 00:02:33,120
如果用户设置了一个新的位置
If the user went to Settings and

51
00:02:33,120 --> 00:02:37,270
当他们回到main_activity里
entered in a new location, when they
come back to the main activity,

52
00:02:37,270 --> 00:02:41,150
在onResume函数里，我们应该发觉位置已经变化了
in the onResume method, we should
detect that the location has changed.

53
00:02:41,150 --> 00:02:44,110
我们是依靠比对nLocation和存储在 shared preferences的
We do this by comparing
the nLocation string

54
00:02:44,110 --> 00:02:46,950
字符串来做到这个的
with the location that's
stored in shared preferences.

55
00:02:46,950 --> 00:02:50,330
如果不一样，那我们找到ForecastFragment
If there's a difference,
then we find the ForecastFragment and

56
00:02:50,330 --> 00:02:52,790
通知位置已经变化了
notify that the location has changed.

57
00:02:52,790 --> 00:02:55,440
同样的，找到DetailFragment，通知位置
Similarly, we find
the DetailFragment and

58
00:02:55,440 --> 00:02:57,850
已经变化了
notify that the location has changed.

59
00:02:57,850 --> 00:03:01,180
因为DetailFragment是动态添加的
Since the DetailFragment is
a dynamically added fragment,

60
00:03:01,180 --> 00:03:04,980
我们应该保证找到正确的FragmentManager的实例
we need to make sure we find the right
instance in the FragmentManager.

61
00:03:04,980 --> 00:03:09,720
通过调用findFragmentByTag，传入tag参数
We do this by calling findFragmentByTag
and passing in this tag.

62
00:03:09,720 --> 00:03:13,070
我们结合这个fragment里的tag
We associated this tag
with this fragment

63
00:03:13,070 --> 00:03:16,840
在我们第一次处理这个fragment，把它添加到屏幕上的时候
when we first did the fragment
transaction to add it to the screen.

64
00:03:16,840 --> 00:03:19,100
如果你还没有创建一个tag,
If you didn't already create a tag and

65
00:03:19,100 --> 00:03:22,780
并将它与detail_fragment联系起来
associate it with the detail fragment
in the fragment transaction,

66
00:03:22,780 --> 00:03:26,080
那么现在就做好它，在main activity里的onCreate函数里
then go ahead and do it now in the
onCreate method of the main activity.

67
00:03:26,080 --> 00:03:29,140
你会注意到detail_fragment的tag只是一个字符串
And you'll notice that the detail
fragment tag is just declared as

68
00:03:29,140 --> 00:03:31,670
它声明在类文件的最上面
a string at the top of the file.

69
00:03:31,670 --> 00:03:34,190
在改好main_activity后
After we make the changes
to the main activity

70
00:03:34,190 --> 00:03:36,540
再去改detail_fragment
we go over to the detail fragment,

71
00:03:36,540 --> 00:03:41,190
我们添加了一个新的方法，叫做onLocationChanged，接收一个位置字符串参数
we add a new method onLocationChanged
that takes in a new location string.

72
00:03:42,300 --> 00:03:45,560
首先，我们尝试指出
First, we try to figure
out what is the date for

73
00:03:45,560 --> 00:03:47,370
当前显示的数据是什么
the data that we're currently showing.

74
00:03:47,370 --> 00:03:50,470
然后使用新的位置创建一个新的URI
Then we create a new Uri
with the new location,

75
00:03:50,470 --> 00:03:52,540
就像我们已经显示出的数据一样
as well as the date we're
already displaying.

76
00:03:52,540 --> 00:03:55,810
更新这个URI，重新载入
We update the nUri and
then we restart the loader.

77
00:03:55,810 --> 00:04:01,560
看看板书上涉及处理位置改变的代码
See the instructor notes for the code
related to handling the location change.

78
00:04:01,560 --> 00:04:03,620
这才是这个app完成时该有的样子
This is what the app should
look like when you're done.

79
00:04:03,620 --> 00:04:06,730
当你点击不同的数据，它自动更新窗格
When you tap on a different date,
it updates the detail pane.

80
00:04:06,730 --> 00:04:09,850
你可以移除所有辛苦创建的数据，因为布局现在
You can remove any hard coded data
because the layout should be populated

81
00:04:09,850 --> 00:04:10,670
可以动态植入了
dynamically now.

