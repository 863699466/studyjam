1
00:00:00,310 --> 00:00:01,870
那么，我知道我们需要创建布局，
So, we know we need to create layouts

2
00:00:01,870 --> 00:00:04,770
并为不同尺寸和像素的屏幕优化资源。
and assets optimized for different screen pixel densities

3
00:00:04,770 --> 00:00:07,320
现在就是个很好的时机，
and sizes. So, now's a great time to

4
00:00:07,320 --> 00:00:12,130
向你介绍Android的框架资源。
introduce you to the Android resource framework. All externalized

5
00:00:12,130 --> 00:00:15,660
所以的Android外部资源，包括字符串布局、绘制区、动画
Android resources, everything from strings to layouts to

6
00:00:15,660 --> 00:00:19,200
都储存在你项目的res文件夹中。
drawables and animations are all stored within your project's

7
00:00:19,200 --> 00:00:22,490
你将你的字符串资源放在strings.xml文件中，
res folder. You've already been putting your strings

8
00:00:22,490 --> 00:00:25,500
该文件储存在值文件夹中。
in the strings.xml file stored in the values folder.

9
00:00:25,500 --> 00:00:27,550
同样，你将你的布局存在布局文件夹中。
And you've been putting your layouts into the layout

10
00:00:27,550 --> 00:00:31,320
当你引用你的资源时，
folder. And you know to reference your resources using

11
00:00:31,320 --> 00:00:34,450
需要在XML文件和调用代码中标识出来。
at notation within both your xml or within the

12
00:00:34,450 --> 00:00:36,617
这样在程序运行的时候，Android才会给程序分配适当的资源。
code. And then at runtime, Android will insert the

13
00:00:36,617 --> 00:00:40,520
目前，一切都很顺利。
appropriate resource for you. So far, so good. And

14
00:00:40,520 --> 00:00:43,475
到这，情况会变得有意思一点。
here's where things get a little more interesting. Android

15
00:00:43,475 --> 00:00:46,740
Android允许为每一个资源创建替代版本，
allows you to create alternative versions of every resource

16
00:00:46,740 --> 00:00:51,040
并允许它们被放置在不同的文件夹中。
by placing them into folders with different qualifiers. We separate

17
00:00:51,040 --> 00:00:54,130
我们用连字符区分这个使用的资源。
each of those using a hyphen. And we can

18
00:00:54,130 --> 00:00:57,320
我们可以基于任何事物，从语言或者方言
add those qualifiers based on anything from language and

19
00:00:57,320 --> 00:01:00,640
到设备是否置入插槽中，
or dialect to whether the device is docked, the

20
00:01:00,640 --> 00:01:02,930
以及触摸屏类型，显示器像素密度，
type of touch screen, the pixel density of the

21
00:01:02,930 --> 00:01:06,820
屏幕方向，
display, the orientation of the screen, and most importantly

22
00:01:06,820 --> 00:01:09,830
还有对响应式设计尤其重要的，这一
for a responsive design in particular, the smallest available

23
00:01:09,830 --> 00:01:12,055
布局所能支持的最小屏幕宽度。
screen width which you can support with that layout.

24
00:01:12,055 --> 00:01:16,270
程序运行时，Android会检查当前设备配置，
At runtime, Android will check the current device configuration,
count
25
00:01:16,270 --> 00:01:20,030
语言，屏幕尺寸，像素大小，等等，
it's language, it's screen size, pixel density, everything,

26
00:01:20,030 --> 00:01:22,790
然后再依此加载相应的布局，字符串以及绘制屏幕。
and then load the right layout strings and drawables

27
00:01:22,790 --> 00:01:26,410
你甚至可以将这些限定词链接在一起。
accordingly. You can even chain these qualifiers together. For

28
00:01:26,410 --> 00:01:29,460
例如，针对德语用户创建一个不同的布局，
example, to create a different layout for German language

29
00:01:29,460 --> 00:01:31,660
就要考虑到有些真的很长的德语单词，
users to account for all of those really long

30
00:01:31,660 --> 00:01:34,960
或更典型的，针对特定屏幕尺寸和设备配置的组合。
German words, or more typically for a combination of

31
00:01:34,960 --> 00:01:38,660
现在，请记住，
screen size and device configuration. Now, keep in mind

32
00:01:38,660 --> 00:01:41,610
下面的这些值都是可以在运行的时候更改的。
that many of these values can change at runtime.

33
00:01:41,610 --> 00:01:44,630
最常见的更改就是长宽的拉伸。
The most common change being that of orientation. And

34
00:01:44,630 --> 00:01:47,190
也就是这个原因，每当设备配置被更改的时候，
it's for this reason that Android activities are destroyed

35
00:01:47,190 --> 00:01:51,360
Android activities 都要被破坏并重新创建。
and recreated whenever the device configuration changes. And that's

36
00:01:51,360 --> 00:01:53,940
这是因为诸如屏幕方向改变这样简单的事情，
because the layout and all of the resources within it

37
00:01:53,940 --> 00:01:56,880
就会导致布局和资源分配出现完全不同的情况。
could be completely different based on something as simple

38
00:01:56,880 --> 00:02:00,640
现在，有了这样一种机制，
as screen orientation change. Now it's good practice, as

39
00:02:00,640 --> 00:02:03,660
你可以很好的本地化你的应用，
well, to localize your apps and provide translated strings

40
00:02:03,660 --> 00:02:06,720
并为你所有的用户提供翻译好的字符串。
for all of your users using this mechanism. And that's

41
00:02:06,720 --> 00:02:08,530
这样就成了一个很简单的任务了。
a task made a lot easier. Thanks to Google

42
00:02:08,530 --> 00:02:12,270
感谢Google Play Publisher站点提供这样的服务。
Play Publisher site that can offer you this service. It's

43
00:02:12,270 --> 00:02:15,230
为不同的像素分辨率提供不同的可绘制区域，
also a really good idea to provide different drawables

44
00:02:15,230 --> 00:02:17,800
同样是一个好主意，
at the appropriate pixel density, so you can get a

45
00:02:17,800 --> 00:02:21,440
这样你就可以在每个设备上都得到清晰美观的照片。
nice crisp image on every device. And when it

46
00:02:21,440 --> 00:02:24,480
当它开始涉及到可选择布局时，Android已经完成了几个可替代模型了。
comes to providing alternative layouts, Android has gone through a

47
00:02:24,480 --> 00:02:28,130
在初期，
few alternative models. Starting in the early days, with this

48
00:02:28,130 --> 00:02:32,110
有几个选择是，小屏，大屏，超大屏。
screen buckets idea of small, normal large, and extra large.

49
00:02:32,110 --> 00:02:36,130
但自从Android 3.2开始，新提供的最小宽度限定词
But, since Android 3.2, the new smallest width qualifier has

50
00:02:36,130 --> 00:02:39,830
使得我们能更好的的控制我们的布局。
given us much more fine grain control over our layouts.

