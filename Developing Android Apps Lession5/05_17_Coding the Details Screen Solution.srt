1
00:00:00,330 --> 00:00:03,420
所以你该如何将UI打碎成更小的组件呢？
So how did you break up the UI
into smaller components?

2
00:00:03,420 --> 00:00:06,640
好，你可能会认为这会是两列。
Well, you might've thought that
this could be two columns.

3
00:00:06,640 --> 00:00:08,970
但是这样有一个元素却很难定位，这里。
But then it would be hard to
position the elements here.

4
00:00:08,970 --> 00:00:11,960
你可以把它们垂直居中于屏幕的高度里。
You could center them vertically
within the height of the screen.

5
00:00:11,960 --> 00:00:14,650
但是它不一定会和左侧的温度视图
But it wouldn't necessarily line up
with the temperature views on the left

6
00:00:14,650 --> 00:00:15,520
对齐。
hand side.

7
00:00:15,520 --> 00:00:18,620
实际上这看起来更像一个水平布局。
Instead this looks more like
a horizontal linear layout.

8
00:00:18,620 --> 00:00:21,660
然后其它视图就可以使用一个垂直的线性布局
Then the rest of the elements could
be laid out by using a vertical

9
00:00:21,660 --> 00:00:22,720
来排列。
linear layout.

10
00:00:22,720 --> 00:00:25,000
这个垂直线性布局会有六个子元素。
The vertical linear layout
would have six children.

11
00:00:25,000 --> 00:00:29,460
第三个元素会是一个水平线性布局，它由两个子元素组成
The third element would be a horizontal
linear layout composed of two children.

12
00:00:29,460 --> 00:00:32,990
第一个会是另一个垂直线性布局，它有两个文本视图，
The first would be another vertical
linear layout with these two text views

13
00:00:32,990 --> 00:00:36,450
第二个视图会是另一个垂直线性布局，
and the second element would be another
vertical linear layout composed of.

14
00:00:36,450 --> 00:00:37,350
包含这两个元素。
These two elements.

15
00:00:37,350 --> 00:00:40,330
要使全屏的内容可以滚动，
To make the contents of the whole
screen vertically scrollable

16
00:00:40,330 --> 00:00:42,250
我们把它放到一个scrollview里。
we put it inside a scroll view.

17
00:00:42,250 --> 00:00:45,470
在这里使用listView会有点多余，因为我们不需要扩展
Using a list view here would be overkill
because we don't need to scale

18
00:00:45,470 --> 00:00:48,300
到无限数量的项，我们也不需要回收。
to an infinite number of item and
we don't need recycling.

19
00:00:48,300 --> 00:00:50,340
这里屏幕上的域是固定的
There's a fixed number of
fields on the screen so

20
00:00:50,340 --> 00:00:52,170
所以scrollView是最完美的选择。
the scroll view is the perfect choice.

21
00:00:52,170 --> 00:00:55,740
我可以向你展示我们为fragment_detail.xml布局的实现。
I can show you our implementation for
the fragment detail XML layout.

22
00:00:55,740 --> 00:00:57,580
我们硬编码了一些数据在layout中，
We hardcoded some data in the layout.

23
00:00:57,580 --> 00:01:00,250
这样它就会在设计面板中作为预览来展示。
So that it would show up as
a preview in the Design pane.

24
00:01:00,250 --> 00:01:02,960
在视图层级的根节点，我们有一个ScrollView。
At the root of the view hierarchy,
we have a ScrollView.

25
00:01:02,960 --> 00:01:05,260
ScrollView只能有最多一个子元素。
ScrollViews can only have max one child.

26
00:01:05,260 --> 00:01:07,470
所以我们将其设为垂直线性布局。
So we set that to be
the vertical LinearLayout.

27
00:01:07,470 --> 00:01:10,960
在这个布局中，我们有一个文本视图给周几。
Inside of this layout, we have
a TextView for the day of the week.

28
00:01:10,960 --> 00:01:14,010
日历日期，以及一个水平线性布局。
The calendar date and
then a horizontal linear layout.

29
00:01:14,010 --> 00:01:16,260
紧接着是一个湿度文本视图，
This is followed by
the humidity text view,

30
00:01:16,260 --> 00:01:18,750
风力文本视图，以及气压文本视图。
wind text view, and pressure text view.

31
00:01:18,750 --> 00:01:22,120
在XML代码中，我们看到ScrollView，包含有一水平布局子视图。
In the XML code we see the scroll
view with the child linear layout.

32
00:01:22,120 --> 00:01:23,590
我们给它一点16dp的内间距，
We give it some padding of 16 dips so

33
00:01:23,590 --> 00:01:27,180
所以内容不会贴在屏幕边上。
that the content is not flesh up
against the edge of the screen.

34
00:01:27,180 --> 00:01:30,850
然后我们看到文本视图，紧挨着是水平线性布局。
Then we see the text views followed
by the horizontal linear layout.

35
00:01:30,850 --> 00:01:33,710
我们指定布局margin top为16dp，
We specify layout margin top of 16 dip

36
00:01:33,710 --> 00:01:36,450
来让它离开这个文本视图的底部一些距离。
to give it some more space from
the bottom of this text view.

37
00:01:36,450 --> 00:01:40,070
在这个水平线性布局中，我们有一个垂直线性布局。
Within this horizontal linear layout
we have one vertical linear layout.

38
00:01:40,070 --> 00:01:42,540
它的宽度为0，权重为1，
Which has a width of 0 and
a weight of 1, and

39
00:01:42,540 --> 00:01:45,570
且另一个线性布局的宽度是0权重也是1。
another linear layout with
a width of 0 and a weight of 1.

40
00:01:45,570 --> 00:01:48,240
也就是说每一个子元素都有相同的宽度。
That means that both of these
children have equal width.

41
00:01:48,240 --> 00:01:52,320
对于这些线性布局，我们定义gravity为center_horizontal。
For this linear layout, we specify
gravity to be center horizontal.

42
00:01:52,320 --> 00:01:56,110
这意味着其中的内容将会是垂直居中的。
That means that the contents inside
of it will be centered horizontally.

43
00:01:56,110 --> 00:01:59,340
这包含了icon和forecast文本视图。
Which includes the icon as well
as the forecast text view.

44
00:01:59,340 --> 00:02:03,260
最后我们还有些剩余的针对其它天气细节的文本视图。
Lastly we have the remaining text
views for the other weather details.

45
00:02:03,260 --> 00:02:06,320
当布局看起来不错了，我们更新DetailFragemnt。
When the layout looks good,
we update the detail fragment.

46
00:02:06,320 --> 00:02:08,460
现在，我们同时把它放到它自己的文件里去。
At this point,
we also move it into its own file.

47
00:02:09,660 --> 00:02:10,910
在onLoadFinish方法中，
In the onload finish method,

48
00:02:10,910 --> 00:02:14,890
我们习惯于有一个findViewById调用，来找到文本视图。
we used to have a find view by
ID call to find the text view.

49
00:02:14,890 --> 00:02:17,520
现在DetailFragment有了更多的视图。
Now that the detail fragment
has a lot more views

50
00:02:17,520 --> 00:02:20,940
我们不希望继续在这里加更多的findViewById调用。
we don't want to continue adding even
more find view by ID calls here.

51
00:02:20,940 --> 00:02:23,740
因为它必须要在每次加载器更新的时候
Because it will have to traverse
the view hierarchy every time that

52
00:02:23,740 --> 00:02:25,790
遍历视图层级。
the loader refreshes.

53
00:02:25,790 --> 00:02:28,590
与之相反，我们修改onCreate方法。
Instead we modify the on create method.

54
00:02:28,590 --> 00:02:31,120
一旦Fragment初始化了，我们就继续
Once the fragment is
inflated we go ahead and

55
00:02:31,120 --> 00:02:34,410
找到对所有视图的引用，稍后用到。
find a reference to all the views
we are going to need later on.

56
00:02:34,410 --> 00:02:37,420
我们把这些视图存作这个类的成员变量。
We store these views as member
variables of the class,

57
00:02:37,420 --> 00:02:40,130
所以它们的命名都以字母m开头。
which is why the name
starts with the letter m.

58
00:02:40,130 --> 00:02:43,520
在onCreateLoader方法中，我们确保从内容提供器
In the on create loader method we
make sure that the projection for

59
00:02:43,520 --> 00:02:46,950
中查询的映射包含了所有我们需要的信息。
our content provider query contains
all the information that we need.

60
00:02:48,050 --> 00:02:49,860
它在文件的顶部定义了。
It's declared at the top of the file.

61
00:02:49,860 --> 00:02:52,430
之前我们叫它FORECAST_COLUMNS，但
Before we had it called
forecast columns, but

62
00:02:52,430 --> 00:02:54,600
现在我们称之为DETAIL_COLUMNS。
we just renamed it to detail columns.

63
00:02:54,600 --> 00:02:57,860
我们也多加了一些列，因为现在我们要在屏幕上
And we also added some more columns
because now we're displaying more

64
00:02:57,860 --> 00:02:59,590
展示更多信息。
information on the screen.

65
00:02:59,590 --> 00:03:03,510
然后，在onLoadFinished方法中我们得到一个游标指向了我们需要的所有数据。
Then in the onLoadFinished method we get
a cursor back with the data we need.

66
00:03:03,510 --> 00:03:06,050
我们从游标中读取weather_condition_id，
We read the weather
condition ID from the cursor

67
00:03:06,050 --> 00:03:09,790
因为我们需要用它来检查该用哪幅图片，
because we're going to need it to
determine which image to display but for

68
00:03:09,790 --> 00:03:11,300
不过现在我们可以使用一副占位图标。
now we can use a place holder icon.

69
00:03:11,300 --> 00:03:15,550
我们继续从游标里读取日期，描述
We continue reading from the cursor
to get the date, the description and

70
00:03:15,550 --> 00:03:16,672
和其它域。
the other fields.

71
00:03:16,672 --> 00:03:20,730
要为用户妥善格式化数据，我们还需要从代码片段中
To format the data properly for the user
we also copied over the strings and

72
00:03:20,730 --> 00:03:22,425
拷贝字符串和工具方法。
the utility method from the gist.

