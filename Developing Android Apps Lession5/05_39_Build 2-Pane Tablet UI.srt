1
00:00:00,070 --> 00:00:03,340
之前我们已经学到了如何用限定符
By taking the knowledge that we learned about overriding resources

2
00:00:03,340 --> 00:00:04,330
修饰资源文件夹
in other folders,

3
00:00:04,330 --> 00:00:08,020
这次我会教你如何用代码实现平板的双页视图显示
we'll walk through the code together on how to build up the two-pane tablet UI.

4
00:00:08,020 --> 00:00:12,400
首先将values-w820dp文件夹删除  因为我们还不需要
First remove the values W820dp folder because we don't need to provide

5
00:00:12,400 --> 00:00:16,270
为屏幕尺寸比820dp还大的设备做适配
specific logic where the current orientation is greater than 820dp.

6
00:00:16,270 --> 00:00:19,000
然后修改xml文件
Then go ahead and make the layout XML changes.

7
00:00:19,000 --> 00:00:22,220
创建一个新的文件夹  命名为layout-sw600dp
Then create a new layout SW 600dp folder.

8
00:00:22,220 --> 00:00:25,610
在其中创建一个新的xml文件  命名为activity_main
And then add a new file called activity_main.

9
00:00:25,610 --> 00:00:30,610
它和默认layout文件夹中的activity_main.xml同名
We use the same file name as in the base layout folder activity_main so

10
00:00:30,610 --> 00:00:34,780
这样  在不同尺寸的设备上就会加载对应的activity_main.xml
that this one overrides the behavior specifically on tablets.

11
00:00:34,780 --> 00:00:37,590
想要看到这一部分的代码  请在gist上查找
To see the code for this file you can check out the gist below.

12
00:00:38,990 --> 00:00:42,590
在这里有一个水平方向的LinearLayout作父布局
Essentially it's a horizontal linear layout that can hold a forecast fragment

13
00:00:42,590 --> 00:00:46,340
在父布局内forecast fragment居左显示  detail fragment居右显示
on the left and a detail fragment on the right.

14
00:00:46,340 --> 00:00:49,510
是时候来对比一下静态Fragment和动态Fragment了
Now's a good time to talk about static verses dynamic fragments.

15
00:00:49,510 --> 00:00:52,710
我们实现左边的forecast fragment是静态的
In our implementation the forecast fragment is the static fragment because

16
00:00:52,710 --> 00:00:56,520
因为我们在xml布局文件中已经完成了定义
we're defining it in the XML layout no matter what orientation or device size

17
00:00:56,520 --> 00:00:59,490
不管设备屏幕的方向怎样  尺寸大小如何  在main activity中我们都需要forecast fragment
we know that we're going to need a forecast fragment in the main activity.

18
00:00:59,490 --> 00:01:03,430
再看这边  我们只声明了一个用于放置detail fragment的容器
On the other hand, we only declare a container for the detail fragment, but

19
00:01:03,430 --> 00:01:05,235
并未真正在里面实现fragment
not the actual fragment.

20
00:01:05,235 --> 00:01:08,250
因为每次都要用不同的参数动态加载它
It's initialized with different arguments each time as a dynamic

21
00:01:08,250 --> 00:01:11,080
所以最好在main activity的Java代码中动态完成创建
fragment, so it's better to dynamically create and add that

22
00:01:11,080 --> 00:01:14,850
并在一个fragment事务中加载出来
fragment in a fragment transaction in the main activity Java code.

23
00:01:14,850 --> 00:01:19,190
这样FragmentManager就可以一直掌控与动态加载有关的参数
That way the fragment manager can keep track of those initialization arguments

24
00:01:19,190 --> 00:01:22,580
当设备切成横屏时  就可以将detail fragment显示出来
and pass those back to us on, after device rotation.

25
00:01:22,580 --> 00:01:25,590
接下来我们需要更新一下单页布局文件
Then we need to update the one pane UI layouts so

26
00:01:25,590 --> 00:01:28,150
让其和双页布局保持一致
that they're consistent with the two pane case.

27
00:01:28,150 --> 00:01:31,780
在默认layout文件夹中的activity_main.xml中
So in the activity main file for the base layout folder this used to be

28
00:01:31,780 --> 00:01:35,030
这里面放了一个FrameLayout  我们用来声明forecast fragment
a frame layout we're going to declare it as a forecast fragment.

29
00:01:35,030 --> 00:01:37,830
这样一来就可以和双面板的布局中
That way it will match the two pane UI,

30
00:01:37,830 --> 00:01:39,800
forecast fragment的声明保持一致
where this also is declared as a fragment in the XML.

31
00:01:39,800 --> 00:01:43,130
之后main activity再去动态加载forecast fragment时
That way the main activity never has to worry about dynamically adding

32
00:01:43,130 --> 00:01:44,750
就不必再担心会有问题发生了
the forecast fragment.

33
00:01:44,750 --> 00:01:47,260
在MainActivity.java的onCreate方法中
In the main activity on create view method.

34
00:01:47,260 --> 00:01:49,790
既然forecast fragment已经在xml文件中声明过了
Since the fragment is already inside this layout we can just remove this so

35
00:01:49,790 --> 00:01:52,930
没必要再动态加载一遍  这一部分java代码也就不需要了
we don't dynamically add it again.

36
00:01:52,930 --> 00:01:57,780
同样地  我们修改了默认layout文件夹中的activity_detail.xml
Similarly we modify the activity detail layout in the base layout folder

37
00:01:57,780 --> 00:02:01,010
将FrameLayout的android:id属性改为weather_detail_container
we change the frame layout ID to be weather detail container.

38
00:02:01,010 --> 00:02:05,620
这样就能和双页布局中包含detail fragment的容器id保持一致
So that it matches the container view id in the two pane UI case.

39
00:02:05,620 --> 00:02:08,240
这种做法就是不论是单页模式
The pattern here is that the detail fragment will always be

40
00:02:08,240 --> 00:02:11,230
还是双页模式  detail fragment都会放在
added to a container called weather_detail_container,

41
00:02:11,230 --> 00:02:13,830
id为weather_detail_container的容器里
both in the two pane, and one pane case.

42
00:02:13,830 --> 00:02:15,500
既然我们更改了容器的id
Since we changed the name of the container,

43
00:02:15,500 --> 00:02:17,920
我们也应该更新一下DetailActivity.java中的代码
we should also update the detail activity.

44
00:02:17,920 --> 00:02:20,020
它只在单页模式下才会用到
This is only used in one pane mode.

45
00:02:20,020 --> 00:02:21,630
在这改一下容器的id
Here's where we change the container name.

46
00:02:22,790 --> 00:02:26,330
在单页模式下  DetailActivity会在该容器内
In the one pane mode the detail activity will add the detail fragment

47
00:02:26,330 --> 00:02:28,250
动态加载出detail fragment
dynamically to this container.

48
00:02:28,250 --> 00:02:31,770
修改完xml布局文件之后  我们应该更新一下MainActivity.java
After we modify the layout we should update the main activity so

49
00:02:31,770 --> 00:02:34,200
让它动态加载DetailFragment
we dynamically add the detail fragment.

50
00:02:34,200 --> 00:02:38,320
在MainActivity.java的onCreate方法中  我们首先检查
In the main activity on create method we check for the presence of the weather

51
00:02:38,320 --> 00:02:42,820
id为weather_detail_container的容器是否存在  来判断当前是否是双页模式
detail container in the layout to know whether this is a two pane UI or not.

52
00:02:42,820 --> 00:02:46,300
我们声明了一个布尔类型的变量mTwoPane保存该判断
We keep track of this information in a Boolean called mTwoPane.

53
00:02:46,300 --> 00:02:49,730
由于mTwoPane属于类的成员变量  所以一定要以m开头命名  切记
Remember that we start with the letter m, because it's a member variable.

54
00:02:49,730 --> 00:02:52,370
比如现在是双页显示  mTwoPane就该是true
In this case, the Boolean should be true.

55
00:02:52,370 --> 00:02:54,490
所以继续往下执行  动态加载出detail fragment
So we go ahead and create a new detail fragment, and

56
00:02:54,490 --> 00:02:56,580
并将其放入weather_detail_container
add it to the weather_detail_container.

57
00:02:56,580 --> 00:02:59,540
我们通过一个fragment事务提交修改
We commit the change by using a fragment transaction,

58
00:02:59,540 --> 00:03:01,176
之前Rado已经介绍过了
which Rado introduced earlier.

59
00:03:01,176 --> 00:03:04,590
另一种情况  若weather_detail_container不存在
Otherwise If the detail container is not present in the layout, then

60
00:03:04,590 --> 00:03:09,220
mTwoPane值为false  意味着目前处在手机的单页模式
the boolean should be false, meaning that this is a one-pane UI for phones.

61
00:03:09,220 --> 00:03:13,010
这种情况下  显示detail fragment内容的工作交由DetailActivity来完成
In this case, the detail activity will handle showing the detail fragment.

62
00:03:13,010 --> 00:03:16,750
注意到  在双页模式下savedInstanceState值为null时
Notice for the two-pane case that we check if the saved instant state

63
00:03:16,750 --> 00:03:17,990
我们才去动态加载detail fragment
bundle is null.

64
00:03:17,990 --> 00:03:20,120
如果savedInstanceState值不为null
If the save instant save bundle is not null,

65
00:03:20,120 --> 00:03:23,086
我们不会再去新创建出来一个  原因如下
then we don't create a new one, and here is the reason why.

66
00:03:23,086 --> 00:03:25,010
在旋转设备之前
Say you want to rotate the device.

67
00:03:25,010 --> 00:03:26,820
app已经是双页显示了
Before the activity and

68
00:03:26,820 --> 00:03:30,500
这时在savedInstanceState已经存放了数据
fragments get torn down, we store information in save state bundles.

69
00:03:30,500 --> 00:03:34,290
改变屏幕方向之后  系统重新载入activity和fragment
Then after the orientation change, the system restores the activity and

70
00:03:34,290 --> 00:03:37,140
会读取savedInstanceState参数中的数据
the fragments, by passing back the same bundle, so

71
00:03:37,140 --> 00:03:39,940
并将显示内容复原到设备旋转之前的样子
that it can be recreated with the same state.

72
00:03:39,940 --> 00:03:42,900
也就是说如果savedInstanceState中有数据
That means if the bundle exists, then we should let the system

73
00:03:42,900 --> 00:03:46,570
我们应该告知系统要复原之前的detail fragment  也就可以跳过这段代码
handle restoring the detail fragment, and we can skip this code.

74
00:03:46,570 --> 00:03:49,120
当detail fragment改为动态加载之后
Once a detail fragment is added dynamically.

75
00:03:49,120 --> 00:03:52,680
给fragment_detail.xml里的控件都加上默认要显示的内容  这对测试有帮助
Make it show some placeholder data just for testing purposes.

76
00:03:52,680 --> 00:03:55,840
接下来我们会深入探究右半部分的逻辑
Later we'll plumb through the right logic, so that it can display the right

77
00:03:55,840 --> 00:03:58,170
它会根据左边所选的日期来显示当天天气的详情
information for the selected date on the left.

78
00:03:58,170 --> 00:03:59,970
修改DetailFragment.java
Modify the detail fragment so

79
00:03:59,970 --> 00:04:03,660
我们需要考虑无数据传进来的情况
that it doesn't expect the incoming intent to have a data URI.

80
00:04:03,660 --> 00:04:06,580
在这种情况下  右边detail fragment部分只会显示
In this case, the detail fragment will just fall back

81
00:04:06,580 --> 00:04:09,310
fragment_detail.xml里各控件的默认内容
to some placeholder data that we have in our XML.

82
00:04:09,310 --> 00:04:12,750
这里intent可能会为空的原因是因为
The reason the intent could be blank is because the detail fragment

83
00:04:12,750 --> 00:04:14,990
DetailFragment现在可以在MainActivity中存在
can now exist within the main activity.

84
00:04:14,990 --> 00:04:17,815
MainActivity在显示时不会事先选择一个日期
And the main activity isn't launched with a URI for

85
00:04:17,815 --> 00:04:22,070
这跟在DetailActivity显示时的情况类似
only one date like the detail activity is normally launched with.

86
00:04:22,070 --> 00:04:22,990
对控件布局优化之后
Once you make the changes for

87
00:04:22,990 --> 00:04:25,410
app就变成了现在这样
the wire frames this is what the app should look like.

88
00:04:25,410 --> 00:04:28,300
这里没有显示天气图标的原因是因为
The reason it doesn't show an icon here is because

89
00:04:28,300 --> 00:04:31,430
我们移走了布局文件里的该ImageView的默认图片
we removed the icon from being hard-coded in the layout.

90
00:04:31,430 --> 00:04:34,460
在之后的视频中  当去动态加载时
But once this data is populated dynamically in a later section,

91
00:04:34,460 --> 00:04:35,290
图标就会出现了
it should show up again.
