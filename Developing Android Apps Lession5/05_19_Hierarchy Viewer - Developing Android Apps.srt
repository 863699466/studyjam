1
00:00:00,300 --> 00:00:03,240
你可以看到HierarchyView让你能在左侧
Here you can see hierarchy view lets you select from

2
00:00:03,240 --> 00:00:06,400
列表中选择物理和虚拟的设备，
a list of devices with physical and virtual on the left,

3
00:00:06,400 --> 00:00:08,720
每一个都包含运行中的Activity，
each of which then contains each of the running activities

4
00:00:08,720 --> 00:00:12,880
和应用。你只需要
and applications running on that device. You simply select the activity

5
00:00:12,880 --> 00:00:15,810
选择你想分析的应用程序的activity。
from the application that you want to profile. Then, hit

6
00:00:15,810 --> 00:00:19,430
然后，点击这里的Load View hierarchy按钮，你将会看见所选的
the Load View hierarchy button here, and you'll see a representation

7
00:00:19,430 --> 00:00:23,250
Activity的视图层次，以树状图形式
of the selected activity's entire view hierarchy represented here in the

8
00:00:23,250 --> 00:00:25,400
从左至右表现在这里。你可以看到
Tree View, from left to right. You can see that the

9
00:00:25,400 --> 00:00:28,780
整个层级也在的概览中展示，布局本身
entire hierarchy is also shown here, in the overview and the layout

10
00:00:28,780 --> 00:00:32,030
会在这里的线框图中展示出来。在层级中
itself is shown in a wire frame here. Clicking on any view,

11
00:00:32,030 --> 00:00:34,910
点击任何视图，会展示显示的是什么，
at any point within the hierarchy, will show you what is displayed,

12
00:00:34,910 --> 00:00:37,889
并展示这个层次结构中，所包含的子视图的数量。
showing us the number of views which are contained within the hierarchy

13
00:00:37,889 --> 00:00:42,310
你也可以得到性能评估，
from this point onwards. You can also obtain the performance metrics to

14
00:00:42,310 --> 00:00:45,230
来了解度量布局并绘制层次结构中的每一个元素需要多长时间。
find out how long it takes to measure layout and draw each

15
00:00:45,230 --> 00:00:48,480
这是一个强大的工具，
element of the hierarchy. It's a powerful tool and you can find

16
00:00:48,480 --> 00:00:50,750
你可以从下方的链接找到视频与使用指南进行学习，
out more about how to use it to optimize your layouts and

17
00:00:50,750 --> 00:00:52,720
来帮助你了解如何优化你的布局与视图。
views in the videos and guides linked to from the

18
00:00:52,720 --> 00:00:55,680
现在，我们可以这个工具来找到，
instructor notes below. For now, note that we can use

19
00:00:55,680 --> 00:00:59,230
一个需要被展平的深度嵌套布局。
it to find surprisingly deeply nested layouts that need to

20
00:00:59,230 --> 00:01:01,780
举个例子，这有一个布局，
be flattened. For example, here we have a layout we

21
00:01:01,780 --> 00:01:05,150
我们可以使用以下两种方法中的一种。
can describe using one of two techniques. One solution is

22
00:01:05,150 --> 00:01:09,530
一种解决方案是使用两个嵌套线性布局。但更好的办法是
using two nested linear layouts. But a better solution would

23
00:01:09,530 --> 00:01:12,576
使用相对布局。相对布局的层次会浅一级。
be using a relative layout. The relative layout is one

24
00:01:12,576 --> 00:01:16,010
另一种技巧是避免把框架布局，作为
level shallower. Another tip is to avoid using the frame layout

25
00:01:16,010 --> 00:01:18,200
总会当作子节点插入其他视图的节点的根节点。
as the root for layout that will always be inserted

26
00:01:18,200 --> 00:01:21,940
在这种情况下，<merge>（合并）标签是一个更好的选择。
as a child into another one. In these circumstances, the merge

27
00:01:21,940 --> 00:01:24,790
当布局被放在父层级中，标签
tag is a better alternative. This will be eliminated when the

28
00:01:24,790 --> 00:01:28,090
将被消除。为了帮助你记住
layout is included into the parents hierarchy. To help you remember

29
00:01:28,090 --> 00:01:30,630
所有的技巧和提示，Android提供了一个强大的
all of these tips and tips, Android has a powerful static

30
00:01:30,630 --> 00:01:33,410
静态分析工具，称为Lint。你可以在这里看见
analysis tool called Lint. As you can see here in the

31
00:01:33,410 --> 00:01:36,790
Lint的窗口，除了我们已经说过的布局警告问题，
lint window, in addition to the layout warnings we've already talked

32
00:01:36,790 --> 00:01:37,990
这里也可以检查问题，
about, it also checks from

33
00:01:37,990 --> 00:01:40,990
包括可访问性、翻译是否完整、硬编码字符串等问题。
everything from accessibility problems, missing translations,

34
00:01:40,990 --> 00:01:44,210
你可以在开发者工具页找到所有
and hard coded strings. You can find all the things lint checks

35
00:01:44,210 --> 00:01:47,510
Lint会检查的项，讲师笔记中给出了链接。
for at the developer tools page linked to in the instructor notes

