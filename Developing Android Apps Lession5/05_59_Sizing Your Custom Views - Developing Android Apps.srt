1
00:00:00,140 --> 00:00:03,635
了解标准的控件库是很好的  但是作为一个曾被人指责
Knowing the standard widget library is nice, but as someone who

2
00:00:03,635 --> 00:00:08,430
重复造轮子
was once accused as not so much recreating the wheel, as hand

3
00:00:08,430 --> 00:00:11,280
喜欢自己手动创建东西的人  我知道有的时候
machining my own nuts and bolts, I know there are times

4
00:00:11,280 --> 00:00:13,990
工具箱中并没有合适的工具来完成工作
when nothing in the tool chest will quite do the job. That's

5
00:00:13,990 --> 00:00:16,470
这时就需要你开始从头创建你的
when it's time to dive in and build you own custom

6
00:00:16,470 --> 00:00:19,900
自定义View   我们并不会全面讲解如何创建
view from scratch. Now we're not going to be including any custom

7
00:00:19,900 --> 00:00:22,170
自定义View  但是我们仍然来简单看看你可以
views within Sunshine, but we can still take a look at how

8
00:00:22,170 --> 00:00:25,240
怎样做这件事  我们从创建一个新的View类开始
you would build one. We'll start by creating a new class for

9
00:00:25,240 --> 00:00:27,250
我们把它命名为MyView
our view. Let's call it MyView. If

10
00:00:27,250 --> 00:00:29,650
如果你不是修改一个现成的View类  而是从头开始创建
you're building something from scratch, rather than modify an

11
00:00:29,650 --> 00:00:32,159
新的类  这个新的类可以继承View类
existing view, it should descend from either View

12
00:00:32,159 --> 00:00:36,760
或者SurfaceView类  View提供基于Canvas画布的
itself or from SurfaceView. View offers a light

13
00:00:36,760 --> 00:00:40,820
轻量级解决方案  而SurfaceView被特别设计
weight, canvas-based approach, while SurfaceView is designed

14
00:00:40,820 --> 00:00:44,085
为需要快速刷新或者使用3D图像的UI元素提供支持
specifically to support UI elements that require rapid redraws

15
00:00:44,085 --> 00:00:47,140
它使用类似OpenGL的技术
and/or 3D graphics, using something like OpenGL.

16
00:00:47,140 --> 00:00:50,660
它最适合用来显示视频或者游戏
It's perfect for views that display video or games.

17
00:00:50,660 --> 00:00:53,550
现有的控件库是完全基于View类的
Now the existing widget library is entirely view

18
00:00:53,550 --> 00:00:56,610
所以我们也使用View类  默认的View
based. So let's take that approach. The base view

19
00:00:56,610 --> 00:01:01,300
类会画出一个没有边界的100x100像素的空正方形区域
class draws an empty borderless 100 by 100 pixel

20
00:01:01,300 --> 00:01:04,830
为了改变这个默认行为  我们可以覆写onMeasure()方法
box. To change that, we override the onMeasure handler,

21
00:01:04,830 --> 00:01:07,160
这样可以指出View的大小
which allows us to indicate the view size.

22
00:01:07,160 --> 00:01:10,040
我们同时覆写onDraw()方法来画出
We'll also override onDraw, in order to draw our

23
00:01:10,040 --> 00:01:13,180
自定义View的内容  如果
own custom view content. Now if it turns out

24
00:01:13,180 --> 00:01:15,810
你的View永远都是一个100x100像素的空正方形区域
that your view should always be an empty 100

25
00:01:15,810 --> 00:01:18,690
那么你什么都不需要做  不然我们还是需要做一些
pixel box then you're in luck. Otherwise we need to do

26
00:01:18,690 --> 00:01:22,790
工作的  所以我们从设置View的大小开始  onMeasure()方法
some work. So let's start by setting our view's size. onMeasure is

27
00:01:22,790 --> 00:01:26,190
会在父View布局放置它的子View的时候被调用
called when your view's parent is laying out it's children. As

28
00:01:26,190 --> 00:01:27,970
就如你所知  当你把一个View添加到一个布局中的时候
you know, when you add a view to a layout you can

29
00:01:27,970 --> 00:01:31,310
你可以指定具体的高度和宽度  但是大多数情况
specify a specific height or width, but in most cases you'll

30
00:01:31,310 --> 00:01:34,860
你会希望它填满父布局或者保持自身大小  当一个View的
want to either match parent or wrap the content. When a view's

31
00:01:34,860 --> 00:01:38,270
onMeasure()方法被它的父布局调用的时候  父布局会问它需要占据
onMeasure is called by its parent layout, it asks, how much space

32
00:01:38,270 --> 00:01:41,360
多大的空间  并且通过传进这些参数告知它
will you use? And passes in how much space is available, and

33
00:01:41,360 --> 00:01:43,110
有多少空间是可以使用的  以及它被赋予了刚好这么多空间
whether the view will be given exactly that much

34
00:01:43,110 --> 00:01:46,630
还是最多这么多空间
space, or at most that much space using these parameters.

35
00:01:46,630 --> 00:01:49,650
你可以这样解析这些参数  然后你就可以获得
You can decode those parameters like this. And that'll allow

36
00:01:49,650 --> 00:01:53,970
宽高标准的具体大小
you to obtain the size and the mode for your

37
00:01:53,970 --> 00:01:58,780
和模式  这个例子中我们只演示
height and width specifications. In this example we're demonstrating just

38
00:01:58,780 --> 00:02:00,820
怎么处理高度参数  但这也同样适用于宽度参数
for the height parameter, but it works the same for

39
00:02:00,820 --> 00:02:04,000
然后我们就可以使用解析出来的模式
width. We can then use the decoded mode parameter to

40
00:02:04,000 --> 00:02:06,940
来设置View的大小
find out what size we should set our view to.

41
00:02:06,940 --> 00:02:09,970
如果返回的模式是EXACTLY  View会被放置进
If the returned mode is EXACTLY, the view will be placed

42
00:02:09,970 --> 00:02:12,740
刚好这么大的区域  如果你得到了EXACTLY模式
into an area of exactly that size. You'll be passed that

43
00:02:12,740 --> 00:02:15,460
要么就是布局指定了一个具体的大小
value if the layout has specified a specific size or if

44
00:02:15,460 --> 00:02:19,030
或者View本身被要求填满父布局  在这两种情况中
the view has been asked to fill the parent. In either case,

45
00:02:19,030 --> 00:02:22,370
最好是直接使用传进来的大小数值
it's best practice to simply return the value passed in, unless

46
00:02:22,370 --> 00:02:25,160
除非这个数值小于你的View的最小的大小  这样的话
that value is below your views minimum size, in which case

47
00:02:25,160 --> 00:02:27,740
你可以使用这个最小的大小  并根据需要让父布局
you can return the minimum value and rely on the parent

48
00:02:27,740 --> 00:02:32,910
来提供裁剪或者滑动的功能  另外一种可能的模式是AT_MOST
layout to crop or scroll as necessary. Another alternative is AT_MOST. This

49
00:02:32,910 --> 00:02:35,750
这是指如果你的View可以自己决定大小  那么就直接使用被赋予的
indicates that your view can define its own size, up to the

50
00:02:35,750 --> 00:02:39,300
大小  这通常是被用于设置为按自身大小显示的View
size given. This is typically the case for views set to wrap

51
00:02:39,300 --> 00:02:41,790
这些View应该占据刚好用来显示自身内容
content, where the view should be as wide as it needs to

52
00:02:41,790 --> 00:02:45,100
的大小  但是不能超过这个大小
be to display its content, but no wider than that. And of

53
00:02:45,100 --> 00:02:47,900
当然不管你怎么显示这样的View  它必须还是要受传进来的大小参数的限制
course all of that's provided that it still fits within the parent

54
00:02:47,900 --> 00:02:50,280
要位于它的父布局的里面
container as indicated by the size

55
00:02:50,280 --> 00:02:52,260
我们刚刚完成了
parameter. Now we've just finished calculating

56
00:02:52,260 --> 00:02:54,580
高度参数的计算  你还需要对宽度参数
all of that for the height parameter and you'd need to do

57
00:02:54,580 --> 00:02:58,060
做同样的计算  一旦你完成了上面的工作
exactly the same thing again for width. Once you've done that and

58
00:02:58,060 --> 00:03:01,150
并确定了你控制的大小  你必须调用
determined the size of your control, you have to call

59
00:03:01,150 --> 00:03:05,050
setMeasuredDimension()方法  你向这个方法传入宽度和高度的
the setMeasuredDimension method. Here you pass in your width and

60
00:03:05,050 --> 00:03:09,229
数值  如果你不调用这个setMeasuredDimension()方法
height values. If you don't call this setMeasuredDimension method, your

61
00:03:09,229 --> 00:03:11,050
你的应用会在View放置完后立即崩溃
app will crash as soon as your view is laid out.
