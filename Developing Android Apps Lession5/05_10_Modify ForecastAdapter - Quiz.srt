1
00:00:00,070 --> 00:00:04,170
控件在参数缺省时显示的数据都是在xml文件中给出的
Apparently the app shows dummy data that was hard coded into the XML file.

2
00:00:04,170 --> 00:00:06,650
让我们使用ForecastAdapter
Let's make the actual weather data appear on screen

3
00:00:06,650 --> 00:00:08,280
来展示真实的天气吧
using the forecast adapter.

4
00:00:08,280 --> 00:00:11,220
现阶段  我们会为所有的子项都使用同一种布局
For now we'll use the same layout for all list items, but

5
00:00:11,220 --> 00:00:14,730
在之后的视频中  我们会将当天的天气改成另一种布局显示
we'll incorporate the today XML layout in the next video.

6
00:00:14,730 --> 00:00:17,960
ForcastAdapter主要负责业务逻辑
Conceptually the forecast adapter manages the logics so that for

7
00:00:17,960 --> 00:00:21,620
它会为游标里的每一行数据都创建对应的子项
each row of cursor we create corresponding list item.

8
00:00:21,620 --> 00:00:25,340
回想一下在Lesson 1中讲到的ArrayAdapter
Think back on the explanation in lesson one about the array adapter,

9
00:00:25,340 --> 00:00:27,960
当时我们将数组作为ArrayAdapter的数据源
except instead of the datasource being an array,

10
00:00:27,960 --> 00:00:31,350
而现在  数据源是来自于数据库中的游标
now the datasource is a cursor from the database.

11
00:00:31,350 --> 00:00:34,590
子项的布局在list_item_forecast.xml中定义
The layout for the list item is defined in the list item forecast XML file.

12
00:00:34,590 --> 00:00:36,980
得到一行游标  我们就会遍历这行游标
For one row of the cursor, we're going to go through and

13
00:00:36,980 --> 00:00:38,780
并把数据获取出来
extract out the values.

14
00:00:38,780 --> 00:00:42,160
由于游标中每一列数据都有对应的控件
We call it binding the data to the views because we take the value in

15
00:00:42,160 --> 00:00:44,650
我们就通过遍历的方式将数据绑定到控件上
each column and we set it on to a different view.

16
00:00:44,650 --> 00:00:46,060
比如
For example,

17
00:00:46,060 --> 00:00:49,610
最高温度应该在最高温度的TextView上显示
the high temperature value would be set on to the high temperature text view.

18
00:00:49,610 --> 00:00:53,590
最低温度也应该在最低温度的TextView上显示
The low temperature value will be set onto the low temperature text view.

19
00:00:53,590 --> 00:00:56,690
再往下一行  以同样的方式绑定这些数据
For the next row, we bind the data in the same way

20
00:00:56,690 --> 00:01:00,100
直到将游标里的数据和子项都进行了绑定
until we create a list item for each row in the cursor.

21
00:01:00,100 --> 00:01:02,640
在我们的代码中定义了ForecastAdapter类
Currently, our code defines forecast adapter

22
00:01:02,640 --> 00:01:05,459
它继承自CursorAdapter类
as extending from the cursor adapter class.

23
00:01:05,459 --> 00:01:06,910
查看CursorAdapter文档
If you look at the documentation for

24
00:01:06,910 --> 00:01:10,090
可知CursorAdapter是一个抽象类
cursor adapter, you'll notice that it's an abstract class.

25
00:01:10,090 --> 00:01:17,420
有两个抽象方法需要重写  分别是bindView和newView
There are two abstract methods that we need to override, bindView, and newView.

26
00:01:17,420 --> 00:01:22,050
newView方法返回一个新生成的子项布局  但是不包含数据
The newView method returns a new list item layout, but has no data in it.

27
00:01:22,050 --> 00:01:25,050
在bindView方法中  传进一个子项布局
The bindView method takes an existing list item layout and

28
00:01:25,050 --> 00:01:27,760
使用游标中的数据更新该布局的内容
updates it, with the data from the cursor.

29
00:01:27,760 --> 00:01:31,080
在ForcastAdapter.java的newView方法中
In the forecast adapter class in the newView method

30
00:01:31,080 --> 00:01:34,550
我们返回了list_item_forecast.xml的布局
we inflate the list item forecast XML layout.

31
00:01:34,550 --> 00:01:36,120
然后在bindView方法里
Then in the bindView method,

32
00:01:36,120 --> 00:01:39,990
将cursor中的数据和对应的控件进行绑定
we bind the data from the cursor to the individual views.

33
00:01:39,990 --> 00:01:43,540
试举一例  从cursor中查找到天气详情
For example, from the cursor we read out the weather description.

34
00:01:44,640 --> 00:01:48,100
再找到id为list_item_forecast_textview的
Then we have to go through the view hierarchy to find the TextView

35
00:01:48,100 --> 00:01:51,020
TextView控件
that has the id list_item_forecast_textview.

36
00:01:51,020 --> 00:01:54,950
调用setText方法后  该TextView就可以显示真实的天气详情了
Once we find the TextView, then we can update it with the right description.

37
00:01:54,950 --> 00:01:57,550
我们提供了bindView方法代码的一个Gist链接
We've provided a gist of code for

38
00:01:57,550 --> 00:01:58,810
来帮你快速入门
the bindView method, to help you get started.

39
00:01:58,810 --> 00:02:01,600
不过我们还是留下了一些空白需要你自己补充完整
But we left some to-dos in there for you to do.

40
00:02:01,600 --> 00:02:04,790
我们还在Gist上提供了一些工具类方法
In the gist, we also included some helper methods and strings for

41
00:02:04,790 --> 00:02:06,180
和字符串键值对
date formatting.

42
00:02:06,180 --> 00:02:06,890
这是因为
That's because,

43
00:02:06,890 --> 00:02:10,840
现阶段  所有的数据都是以同一种格式显示出来的
in our current implementation, all the dates are displayed in the same way.

44
00:02:10,840 --> 00:02:14,280
在之前设计好的框架中  我们考虑到日期格式需要更符合用户习惯
In the wire frames, though, we have a more friendly date format.

45
00:02:14,280 --> 00:02:18,640
比如将日期显示成今天  明天  星期三  星期四之类的
Such as today, tomorrow, Wednesday, Thursday, etc.

46
00:02:18,640 --> 00:02:19,490
我们提供的工具类方法
Here's the logic for

47
00:02:19,490 --> 00:02:22,650
就是将日期转换成这种用户友好型的格式
what the helper method does to get the friendly date string.

48
00:02:22,650 --> 00:02:26,840
比如本周内的日期  会把它说成今天  或者明天  或者星期几
If it's this week, it says today or tomorrow or the day of the week.

49
00:02:26,840 --> 00:02:31,540
如果不是本周  就会使用Mon June 8这种格式
If it's more than a week out, then we use the format Monday June 8 and so on.

50
00:02:31,540 --> 00:02:33,420
编译并运行你的代码
After you compile and

51
00:02:33,420 --> 00:02:36,270
带有真实数据的天气预报应用就做出来了
run the app, the actual weather forecast data should now be showing in the app.

52
00:02:36,270 --> 00:02:38,870
而且日期更加人性化
And it's using a more friendly date format.

53
00:02:38,870 --> 00:02:40,230
最后  别忘了检查一下这几个选项你是否都学会了
Check these boxes when you're done.
