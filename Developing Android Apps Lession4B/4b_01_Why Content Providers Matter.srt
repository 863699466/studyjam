1
00:00:00,470 --> 00:00:02,400
在我们继续学习和创建一个ContentProvider之前
Before we go ahead and build a content provider

2
00:00:02,400 --> 00:00:05,280
你会不会想到去问，这是为什么呢？
you wouldn't be out of line to ask, well why.

3
00:00:07,250 --> 00:00:09,060
最简单的答案就是ContentProvider允许你
The simplest answer is that it allows you to

4
00:00:09,060 --> 00:00:12,540
安全并且高效地跨过应用程序的界限分享你的数据
share your data safely and efficiently across app boundaries by

5
00:00:12,540 --> 00:00:15,520
而这需要你把底层数据源做一定的抽象，就像你使用SQLite
abstracting the underlying data source, be it SQLite like

6
00:00:15,520 --> 00:00:19,080
或者文件，或者其他的什么东西。然后其他
this or files or really anything else. So that other

7
00:00:19,080 --> 00:00:21,870
应用便可以访问它，而不需要真正理解你是如何存储它的
apps can access it without really needing to understand how

8
00:00:21,870 --> 00:00:25,650
事实上，日历，短信和联系人
you stored it. In fact, the calendar, SMS, and contacts

9
00:00:25,650 --> 00:00:29,620
的API都是用shared content providers这种方法工作的
APIs work that way, using shared content providers.

10
00:00:29,620 --> 00:00:31,780
我们等会将要分享我们的天气数据库，但是如果
We're going to share our weather database later, but if

11
00:00:31,780 --> 00:00:34,370
你不想公开你的应用的数据
you're not planning to expose your app's data, you're

12
00:00:34,370 --> 00:00:38,160
你可能会考虑跳过这个步骤，对吧？
probably thinking you can skip this bit, right? Well,

13
00:00:38,160 --> 00:00:40,770
但实际上，在很多时候你可以这样做
almost, in a lot of cases you could,

14
00:00:40,770 --> 00:00:44,970
但你不应该这样做。比如说，在Sunshine这个应用中，我们使用
but really shouldn't. For example, in Sunshine we're using

15
00:00:44,970 --> 00:00:47,380
SQLite。但是你可以将数据存储在文件中
SQ Lite. But you could be storing data in

16
00:00:47,380 --> 00:00:50,680
动态的运行时数据中，或者也可能只是一个不同的数据库中
files, dynamic run-time data or even just a different

17
00:00:50,680 --> 00:00:55,040
通过使用ContentProvider，使你更加容易
database library. By using content providers, it's easier for

18
00:00:55,040 --> 00:00:57,380
将数据源切换成另一个
you to potentially switch out the data source and

19
00:00:57,380 --> 00:00:59,740
并且能使别人比你更容易去管理
much easier for someone other than you to manage

20
00:00:59,740 --> 00:01:02,410
UI层的代码，即使他们并没有深入理解
the UI layer code without them having to understand

21
00:01:02,410 --> 00:01:05,459
你的数据存储是怎样实现的。
the depths of your data storage implementation. On the

22
00:01:05,459 --> 00:01:09,070
在UI层，这是一个通用的返回光标机制
UI layer, it's a generic mechanism that returns cursors.

23
00:01:09,070 --> 00:01:12,270
就和SQLite 数据库中返回数据一样
The same of those returned by SQLite databases. So,

24
00:01:12,270 --> 00:01:15,690
所以，如果你的数据层实现有改变，你的ContentProvider
if your data layer implementation changes, then your content provider

25
00:01:15,690 --> 00:01:19,390
会受到影响。现在是你该写代码的时候了
is effected. Still, it's just you writing the code right

26
00:01:19,390 --> 00:01:21,520
这么多的例子是为了顺应
now and that's a lot of boilerplate for the sake of

27
00:01:21,520 --> 00:01:24,690
简洁的设计模式。嗯，记住
following a neat design pattern. Well, keep in mind that

28
00:01:24,690 --> 00:01:27,730
就framework而言，所有的数据都通过ContentProvider处理
as far as the framework is concerned, all data is handled

29
00:01:27,730 --> 00:01:31,027
所以，如果你要和你的应用外的
through content providers. So, if you want to interact with

30
00:01:31,027 --> 00:01:33,790
任何东西互动，比如说，向widget发送数据
anything outside of your app, such as sending data to a

31
00:01:33,790 --> 00:01:37,770
或者从新的应用那里返回搜索结果
widget or returning search results from the newer app, you'll need

32
00:01:37,770 --> 00:01:40,770
你会需要一个ContentProvider去做这些事情。事实上，这就是
a content provider for that too. In fact, that's how the

33
00:01:40,770 --> 00:01:43,760
Google play store 和Gmail widgets 的工作方式，以及
Google play store and Gmail widgets work. As well as the

34
00:01:43,760 --> 00:01:47,920
为什么能够从Google Play得到搜索结果。同样的，这里有一堆API
ability to get search results from Google Play. Similarly, there's a bunch

35
00:01:47,920 --> 00:01:51,960
旨在优化 同步，查询数据 和
of APIs designed to optimize the process of synching and querying data,

36
00:01:51,960 --> 00:01:56,580
更新相应的UI。这些都期待用ContentProvider实现
and updating UI accordingly. And all of them also expect content providers.

37
00:02:00,490 --> 00:02:03,950
这些(优化用的API)包括了SyncAdapter和CursorLoader，它们使得
That includes sync adapters and cursor loaders. Which make your

38
00:02:03,950 --> 00:02:07,140
你的应用可以和服务端有效地进行同步，可以从UI层载入数据
app able to efficiently sync with your server, load data in

39
00:02:07,140 --> 00:02:10,360
还包括了内置的content observers 即当你的基础数据发生改变时
your UI layer, and which include built in content observers that

40
00:02:10,360 --> 00:02:14,167
它们将会自动更新你的UI
will update your UI automatically when the underlying data changes. You

41
00:02:14,167 --> 00:02:17,680
你当然可以自己将这些全部建立起来
could, of course, build all of that yourself but at

42
00:02:17,680 --> 00:02:20,350
但从某种程度来说
a certain point the advantage you gained by not writing a

43
00:02:20,350 --> 00:02:23,280
你所获得的优势是通过一开始不写ContentProvider 
content provider to begin with is lost in the process of

44
00:02:23,280 --> 00:02:26,900
而丢失不必重新创建所有使用它的有用簇的过程
having to recreate all of the useful clusters that utilize it.

45
00:02:26,900 --> 00:02:30,160
在这节课的后面，我们将会看一下你发布的ContentProvider并使用Lotus
We'll take a look at publishing your content provider and using Lotus

46
00:02:30,160 --> 00:02:33,980
去有效地访问它。在第六节课程中，当我们做有效的背景更新时，
to access it efficiently later in this lesson. And we'll explore sync adapters

47
00:02:33,980 --> 00:02:37,820
我们还会探索sync adapter
in lesson six when we look at doing efficient background updates. But

48
00:02:37,820 --> 00:02:41,390
但首先，Dan已经准备好向你展示如何建立一个ContentProvider了
first, Dan is going to show you how to actually build a content provider.
