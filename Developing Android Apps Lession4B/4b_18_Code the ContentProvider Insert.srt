1
00:00:00,280 --> 00:00:03,030
我们已经介绍了使用ContentProvider进行查询
Now that we've covered querying
with our content provider,

2
00:00:03,030 --> 00:00:05,120
现在可以开始插入数据了
it's time to start inserting data.

3
00:00:05,120 --> 00:00:08,080
看一下我们在源代码中提供的
Let's take a look at the incomplete
content provider insert function

4
00:00:08,080 --> 00:00:10,110
不完整的ContentProvider的insert函数
we provided in the source code.

5
00:00:10,110 --> 00:00:14,290
正如你所看到的，这个函数利用了UriMatcher代码
As you can see, this function takes
advantage of the URI matcher code.

6
00:00:14,290 --> 00:00:16,830
但它只需要基本的 URI
But it only requires the base URIs.

7
00:00:16,830 --> 00:00:19,620
这是因为插入是从根本上简化的
That's because inserts
are fundamentally simpler.

8
00:00:19,620 --> 00:00:23,000
我们只是想确保那些正确的记录会在正确的表格中结束
We simply want to make sure that the
right record ends up in the right table.

9
00:00:23,000 --> 00:00:26,060
那些包含在其他URI中的数据，比如说 location和
The data that is contained in
the other URI, such as location and

10
00:00:26,060 --> 00:00:29,610
date，实际上将会是在插入的数据中使用的值
date, will actually be in the content
values used in the insert.

11
00:00:29,610 --> 00:00:33,480
请注意，如果我们想做的话，可以在这里支持所有的URI
Note that if we wanted to,
we could support all of the URIs here.

12
00:00:33,480 --> 00:00:37,590
但它使得该插入函数的实现更加复杂
But it makes the implementation of the
insert function far more complicated.

13
00:00:37,590 --> 00:00:39,450
当我们在数据库中插入数据的时候
When we insert into the database.

14
00:00:39,450 --> 00:00:42,170
我们希望它可以将数据可能因为我们的插入而造成了改变了的消息
We wanted to notify every
content observer that might have

15
00:00:42,170 --> 00:00:44,240
提醒所有的content observer
data modified by our insert.

16
00:00:44,240 --> 00:00:49,050
事实证明，cursor通过注册自身通知其派生的后继
It turns out that cursors register
themselves as notify for descendents.

17
00:00:49,050 --> 00:00:53,438
这意味着通知根URI也会同时通知所有的派生的URI
Which means that notifying the root
URI will also notify all descendents

18
00:00:53,438 --> 00:00:57,760
即那些含有附加路径信息的URI
of the URI, ones that contain
additional path information.

19
00:00:57,760 --> 00:01:00,750
比如说调用我们的ContentProvider
Just like with calling
our content providers.

20
00:01:00,750 --> 00:01:05,140
我们可以使用ContentResolver去通知ContentObserver
We can use a content resolver
to notify our content observer.

21
00:01:05,140 --> 00:01:09,100
正如你所见的，sunshine应用中每个表的根URI
As you can see, the root URI for
each table in sunshine

22
00:01:09,100 --> 00:01:13,380
包含了上下文范围，规范和表名
just contains the context scope,
the authority, and the table name.

23
00:01:13,380 --> 00:01:18,680
在这种情况下，包含日期的content URI
In the case presented,
the content URI that contains a date.

24
00:01:18,680 --> 00:01:21,270
是天气content URI的派生
Is a descendant of the plain
weather content URI.

25
00:01:22,330 --> 00:01:25,080
如果我们基于其他项目而不是根URI进行通知
If we notify based on anything
other than the root URI.

26
00:01:26,080 --> 00:01:29,350
那么监听根URI的cursor就不能得到变化的通知
Then a cursor listening on the root
URI will not get notified of a change

27
00:01:29,350 --> 00:01:31,300
而这肯定会对其造成影响
that would certainly impact it.

28
00:01:31,300 --> 00:01:34,250
所以我们这样做的时候一定要十分谨慎
So we have to be very
careful when doing that.

29
00:01:34,250 --> 00:01:36,320
让我们回到源代码中
Let's go back to the source code.

30
00:01:36,320 --> 00:01:39,220
对于Weather来说，我们只需要把
For weather
we just passed the perimeters that came

31
00:01:39,220 --> 00:01:42,500
这个参数传入到insert函数中就可以了
into the content provider into
the data base insert call.

32
00:01:43,620 --> 00:01:46,770
插入失败的话，应该抛出一个异常
We should throw an exception
if the insert fails.

33
00:01:46,770 --> 00:01:50,200
唯一的技巧就是保证返回一个正确的值
The only trick here is to make
sure we return the correct value.

34
00:01:50,200 --> 00:01:51,950
在这里是一个URI
Which is a URI.

35
00:01:51,950 --> 00:01:55,450
幸运的是我们已经写了一个建立URI的函数
Fortunately we made a function
to build these URIs

36
00:01:55,450 --> 00:01:58,110
它通过ID来获取天气的路径
which contained the weather
path followed by an ID.

37
00:01:59,200 --> 00:02:03,220
如果我们要保证ContentProvider完全的话
If we were being complete in our content
provider implementation, we should also

38
00:02:03,220 --> 00:02:07,710
我们还应该在合约的UriMatcher和查询函数中提供这些URI类型
implement these URI types in the
contract URI matcher and query function.

39
00:02:07,710 --> 00:02:10,820
但是实际上实现ContentProvider时有件不错的事是
But the beautiful thing about
implementing a content provider,

40
00:02:10,820 --> 00:02:14,120
尤其是如果这些URI只被你的应用程序所使用的话
especially if it's only being
used by your application,

41
00:02:14,120 --> 00:02:16,480
那你只需要去实现你所使用的功能就好了
is it you only need to
implement the features you use.

42
00:02:17,580 --> 00:02:21,380
所以我们只是通过使用buildWeatherUri函数设置了return URI
So we just set the return URI by
using the build weather URI function.

