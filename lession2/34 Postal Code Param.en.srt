1
00:00:00,330 --> 00:00:03,850
非常棒  我们的手机已经可以正常接收数据了
Great work. Thumbs up. The data has landed safely on

2
00:00:03,850 --> 00:00:07,065
但我又想了想  
our phones. But I was thinking about it, and actually

3
00:00:07,065 --> 00:00:10,057
我们定义一个固定的邮编（去获取天气数据）
instead of hard coding our post code in, we'd really

4
00:00:10,057 --> 00:00:12,515
这对于用户来说肯定是不行的
[SOUND] like our sun train app user, to be able

5
00:00:12,515 --> 00:00:15,726
他们应该可以在设置里自定义位置信息
to change their location in the settings. So let's make

6
00:00:15,726 --> 00:00:19,183
那我们就多加上一个邮编的参数  让我们这个类变得更贴心吧
the FetchWeatherTask more flexible by having it take as input

7
00:00:19,183 --> 00:00:22,890
鉴于我们要这么做  我们应该
a postal code parameter. While we're doing that, we should

8
00:00:22,890 --> 00:00:26,340
通过这个机会给项目做一些重构
also take this opportunity to do a little bit of refactoring.

9
00:00:26,340 --> 00:00:29,600
之前是通过字符串拼接  得到的服务器请求URL
Instead of concatenating the strings for the server query

10
00:00:29,600 --> 00:00:32,369
取而代之的是UriBuilder这个类来组装这个URL
URL, we should use a UriBuilder Class to build

11
00:00:32,369 --> 00:00:35,580
我们可以定义一个基础的 URL 地址
up he URL. We can declare a base URL

12
00:00:35,580 --> 00:00:39,120
然后把每个参数拼接组装上去
and then append each pair of query PARAM and

13
00:00:39,120 --> 00:00:43,100
这些参数包括邮编信息  
PARAM values onto it. This includes PARAM's for post

14
00:00:43,100 --> 00:00:46,890
输出JSON数据格式、使用公制单位以及天数
code. JSON format, metric units, and date count. This'll

15
00:00:46,890 --> 00:00:49,080
未来我们允许用户自己设置这些信息
make it easier in the future if we ever

16
00:00:49,080 --> 00:00:51,610
我们代码实现起来就会很简单了
have to make these options configurable by the user.

17
00:00:52,710 --> 00:00:55,950
如果你想确认拼接之后的URL地址是正确的  做完这些之后
If you want to verify that the URL is built up properly. After

18
00:00:55,950 --> 00:00:59,110
你可以把这个地址打印在日志监控器里
you do these tasks, you can use verbose logging to print it out.

