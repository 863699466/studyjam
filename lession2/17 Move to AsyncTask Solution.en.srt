1
00:00:00,420 --> 00:00:03,460
对于ForecastFragment类里的问题
For the solution within ForecastFragment, we

2
00:00:03,460 --> 00:00:08,310
我们实现了继承自AsyncTask类的FetchWeatherTask类。
implemented FetchWeatherTask, which extends AsyncTask. The generics

3
00:00:08,310 --> 00:00:13,518
这里的泛型我们只用了Void，在这里是没问题的。然后在doInBackground()方法里
we use are just Void, and this is fine for now. Then within the doInBackground

4
00:00:13,518 --> 00:00:16,014
把之前网络部分的代码片段复制进来
method, we copied our networking codes snippet,

5
00:00:16,014 --> 00:00:18,610
大体是相同的，除了在
here. It's the same, except [INAUDIBLE] in

6
00:00:18,610 --> 00:00:21,600
某些情况下我们返回一个null
certain cases we return null instead of

7
00:00:21,600 --> 00:00:24,010
而不是将包含天气预报信息的JSON字符串赋值为null
setting the forecast JSON string to be null.

8
00:00:25,010 --> 00:00:28,770
之前，代码是在onCreateView()方法中的
Previously, the code was in onCreateView, which expected us

9
00:00:28,770 --> 00:00:31,370
这个方法需要我们扩展并返回一个View对象，所以有必要运行到
inflate and return a View. So it's important that it got

10
00:00:31,370 --> 00:00:33,510
下面这些代码
to the rest of the code. Even if there was an

11
00:00:33,510 --> 00:00:37,110
即使在网络部分的代码中报错。现在网络部分的代码在
error in the networking code. Now that the networking code is in

12
00:00:37,110 --> 00:00:40,060
AsyncTask类里面，doInBackground()方法中也没有什么东西
AsyncTask, there's really nothing that comes after this in

13
00:00:40,060 --> 00:00:42,890
紧随其后。所以遇到报错就立即返回
the doInBackground method. So it's fine to just bail early

14
00:00:42,890 --> 00:00:46,430
也没有关系。另外对于我们的日志信息
whenever there's an error. Also know that for our log messages,

15
00:00:46,430 --> 00:00:50,230
我们在类的最上面定义了一个LOG_TAG常量。
we've defined a log tag constant at the top of this task.

16
00:00:51,640 --> 00:00:55,940
这个LOG_TAG被定义为FetchWeatherTask类的名字
This log tag is defined to be the name of the FetchWeatherTask class. The

17
00:00:55,940 --> 00:00:57,670
我们这么做而不是
reason we use this syntax instead

18
00:00:57,670 --> 00:01:01,170
声明一个FetchWeatherTask的字符串，是因为 
of declaring a string FetchWeatherTask, it because

19
00:01:01,170 --> 00:01:04,370
我们希望这个常量能一直和类名保持一致。如果你重命名了这个类
we want these two to be in sync. If you ever rename the

20
00:01:04,370 --> 00:01:07,630
那么这儿将抛出一个异常，除非你同样修改了这儿。
class then it will throw an exception unless you also update it here.

