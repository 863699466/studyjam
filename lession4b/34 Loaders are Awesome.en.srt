1
00:00:00,240 --> 00:00:04,470
让我们探讨一下加速器。加速器是真了不起。他们是
Let's talk about Loaders. Loaders are awesome. They were

2
00:00:04,470 --> 00:00:07,080
由Honeycomb出台的，但是作为支持库的一部分却是非常有用的。
introduced in Honeycomb, but are available as part of the

3
00:00:07,080 --> 00:00:09,400
所以当你要支持较老的平台版本时，
support library. So you can take advantage of them

4
00:00:09,400 --> 00:00:13,170
你可以使用他们了。加速器实质上是在一个活动或者片段
when supporting earlier platform releases. Loaders are essentially the best

5
00:00:13,170 --> 00:00:16,640
里实现异步数据加载最佳的实践方法。
practice implementation for asynchronous data loading within an activity

6
00:00:16,640 --> 00:00:20,040
所以当你新建一个加速器的时候，他同时也在后台线程
or fragment. So when you create a Loader, it creates

7
00:00:20,040 --> 00:00:23,100
创建了一个异步任务去加载数据。
an async task to load data on the background thread.

8
00:00:23,100 --> 00:00:25,480
当最初的加载完成时，他就开始和用户界面线程同步了，
It then syncs with the UI thread when the initial

9
00:00:25,480 --> 00:00:27,760
然后建立基础数据监听器，
loading is complete, and can be set up to monitor

10
00:00:27,760 --> 00:00:30,610
并且也提供所有用户界面线程的更新。
the underlying data, and deliver any updates to the UI

11
00:00:30,610 --> 00:00:33,640
好事连连，你所做的这一切
thread as well. Best still, all that work you did

12
00:00:33,640 --> 00:00:36,500
通过cursor加速器为你的数据库添加一个
adding a content provider to your database pays off right

13
00:00:36,500 --> 00:00:39,050
内容提供者是非常值得的。这个cursor加速器就是异步任务
now, with the cursor loader. The cursor loader is an

14
00:00:39,050 --> 00:00:42,940
加速器的表现，特别是
implementation of the async task loader, specifically designed to query

15
00:00:42,940 --> 00:00:46,320
可以查询内容提供者，还同时会返回一个你可以直接绑定到
content providers, and return a cursor, which you can then

16
00:00:46,320 --> 00:00:50,410
一个用户界面的指针。他将自动更新指针，
bind directly to a UI. It will automatically update that cursor,

17
00:00:50,410 --> 00:00:53,700
不管这个潜在的内容提供者何时改变，都是在
whenever the underlying content provider changes, based on changes

18
00:00:53,700 --> 00:00:56,240
潜在的数据库的基础上改变。在一个配置发生改变之后，他将重新连接
to the underlying database. And it will reconnect to the

19
00:00:56,240 --> 00:00:59,260
被重建之后最后一次返回的指针，连同着主机行为窗口
last returned cursor after being recreated, along with the

20
00:00:59,260 --> 00:01:02,320
这意味着你将不需要
host activity, after a configuration change. That means you won't

21
00:01:02,320 --> 00:01:04,610
重新查询数据了，就是因为这个装置是循环的。
have to requery data, just because the device was

22
00:01:04,610 --> 00:01:07,600
所以这个cursor加速器解决了所有你的
rotated. So the cursor loader handles all of your cursor

23
00:01:07,600 --> 00:01:11,890
指针管理还有后台线程的创建，用户界面线程的同步，还有数据源的监听。
management and background thread creation, UI thread synchronization, and data

24
00:01:11,890 --> 00:01:15,380
如果你没有选择使用内容提供者，
source monitoring. If you chose not to use content providers,

25
00:01:15,380 --> 00:01:19,340
那就是你的选择不佳。但至少你可以利用加速器，
you chose poorly. But still, you can take advantage

26
00:01:19,340 --> 00:01:21,200
你只需要直接扩展一个think任务加速器
of loaders, you just need to create your own

27
00:01:21,200 --> 00:01:24,200
就可以新建一个你自己的加速器。
loader by extending a think task loader directly. You

28
00:01:24,200 --> 00:01:26,220
你会在下边的老师指导下发现更多。
can find out more in the instructor notes below.

