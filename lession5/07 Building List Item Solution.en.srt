1
00:00:00,140 --> 00:00:03,920
为了完成这个列表项 我们创建了一个水平的带有三个子View的LinearLayout。
To build up this list item we created a horizontal linear layout with three

2
00:00:03,920 --> 00:00:08,470
第一个子View是ImageView，第二个子View是一个
children. The first child is an image view. The second child is a vertical

3
00:00:08,470 --> 00:00:11,980
由两个互相叠起来的TextView组成的垂直LinearLayout
linear layout composed of two text views stacked on top of each other.

4
00:00:11,980 --> 00:00:15,200
第三个也一样，是一个由两个
The third child is the same. It's a vertical linear layout composed of

5
00:00:15,200 --> 00:00:17,480
显示温度的TextView叠起来的垂直LinearLayout。
the two temperature text views stacked on top of each other.

6
00:00:17,480 --> 00:00:20,370
现在你可能疑惑为什么我们不用RelativeLayout。
Now you might be wondering why we didn't use a relative layout.

7
00:00:20,370 --> 00:00:24,354
因为这样会使用较少的层级。是的，如果你想要
Because that would give us less layers of hierarchy. Well, relative layouts

8
00:00:24,354 --> 00:00:29,100
指定一个view在另一个view的右边或者
are good if you want to specify that one view should be to the right of another,

9
00:00:29,100 --> 00:00:33,545
上面的时候，使用RelativeLayout是合适的。当你想要一个view在
or on top of another view. Relative layouts are also good if you want a view to

10
00:00:33,545 --> 00:00:37,923
父view的左边，上面，右边或者底部的时候RelativeLayout也很恰当。但对于现在这种，要让两个TextView居中于
be aligned to the parents left, top, right or bottom. But it's harder in this

11
00:00:37,923 --> 00:00:42,042
在由ImageView分配的垂直高度中的情况而言，则会变得困难。
case to center these two text views within the vertical height allocated by this

12
00:00:42,042 --> 00:00:46,190
在这里和这里使用LinearLayout都相对比较简单，所以不管这个图片是任何高度
image view. It's easier with the linear layout here and here, so if the image

13
00:00:46,190 --> 00:00:50,140
这两个TextView仍然可以垂直方向居中
was any taller, these two text views would still stay vertically centered. And

14
00:00:50,140 --> 00:00:53,860
这是在Android Studio中预览的样子
this is what it looks like in the Device Preview within Android Studio.

15
00:00:53,860 --> 00:00:56,530
关于这个水平LinearLayout，我想指出一点，他有三个子视图的水平，
I want to point out one thing about this horizontal linear layout,

16
00:00:56,530 --> 00:00:59,880
ImageView，垂直的LinearLayout和另外一个
which has three children. The image view, the vertical linear layout, and

17
00:00:59,880 --> 00:01:04,483
垂直的LinearLayout。其中第二个子view实际上width设为0dp
the other vertical linear layout. The second child actually has a width of zero

18
00:01:04,483 --> 00:01:09,110
但weight是1。那代表任何没有被其他子view占据的水平空间
DP but a weight of one. That means that any horizontal space that's not taken up

19
00:01:09,110 --> 00:01:14,470
将会在设了weight的view中分配。
by other children will be distributed among views that have assigned weights. So

20
00:01:14,470 --> 00:01:18,430
因此，来看一下第三个子view，它的宽度属性是wrap_content，weight属性为0
if we look at this third child, it has a width of wrap content and

21
00:01:18,430 --> 00:01:21,000
如果我们把它的weight属性改为1
a weight of zero. If we gave it a weight of one,

22
00:01:21,000 --> 00:01:25,070
它会被像这样拉伸。基本上这个图标是一个固定的宽度
then it would stretch out like this. Basically the icon is a fixed width, and

23
00:01:25,070 --> 00:01:28,560
然后剩余的水平空间分给这两个子视图。
then the remaining horizontal space is divided among these two children.

24
00:01:28,560 --> 00:01:31,970
因为他们都有属性weight为1，所以会平均分配。但是如果你看一下
Since they both have a weight one, it's distributed equally. But if you look at

25
00:01:31,970 --> 00:01:35,840
线框图的话，这些温度视图是右对齐的。
the wire frames, these temperature views are actually aligned to the right. So

26
00:01:35,840 --> 00:01:39,930
所以我们要做的就是把width的属性设置为wrap_content，weight属性设置为0
all we need is for the width to be wrap content, and for the weight to be zero.

27
00:01:39,930 --> 00:01:43,690
然后任何剩下的水平空间就会给中间这个weight为1的元素。
Then any remaining horizontal space will be assigned to this middle element,

28
00:01:43,690 --> 00:01:46,480
这是xml布局的代码。
with a weight of one. And this is the code for the xml layout.

29
00:01:46,480 --> 00:01:50,770
我们有一个水平方向的LinearLayout。宽度是match_parent
We have a linear layout in horizontal orientation. The width is match parent to

30
00:01:50,770 --> 00:01:54,590
占满屏幕的宽度，并且每一个列表项的高度为wrap_content。
match the width of the screen, and each list item has wrap content on its

31
00:01:54,590 --> 00:01:58,230
但他有一个最小的高度，
height. But it does have a minimum height at least of this attribute,

32
00:01:58,230 --> 00:02:02,140
值为listPreferredItemHeight。我们指定gravity值为center_vertial，从而让其所有的
list preferred item height. We specify gravity to be center vertical so that

33
00:02:02,140 --> 00:02:05,790
子view都在竖直方向上居中。我们也设置了一点点padding
all of its children are vertically centered within it. We also specify a little

34
00:02:05,790 --> 00:02:10,120
在他里面，我们添加一个ImageView，宽高都设为wrap_content。
bit of padding. Inside of it, we add an image view, which has wrap content for

35
00:02:10,120 --> 00:02:14,630
并且我们设置src为这个占位的drawable。
height and width. And we specify the source as this placeholder drawable.

36
00:02:14,630 --> 00:02:17,720
接着我们有这个垂直LinearLayout，宽为0dp，weight为1。
Next we have the vertical linear layout, where the width is zero DP and

37
00:02:17,720 --> 00:02:21,643
我在这个View和他旁边的图标之间
the weight is one. We specify a little bit of padding between this view and

38
00:02:21,643 --> 00:02:24,060
指定一点padding。在这个LinearLayout里面，
the icon beside it. Within the linear layout,

39
00:02:24,060 --> 00:02:28,390
我们也有日期TextView和天气预报TextView。除此之外
we have the date textview as well as the forecast_textview. Beside that,

40
00:02:28,390 --> 00:02:31,930
我们还有另外一个垂直的LinearLayout，包含了最高温度TextView
we have another vertical linear layout with the high temperature textview and

41
00:02:31,930 --> 00:02:34,090
和最低温度TextView。就是这些。
the low temperature_textview. And that's it.