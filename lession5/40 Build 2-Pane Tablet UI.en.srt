1
00:00:00,060 --> 00:00:02,670
基于我们之前关于文件夹间资源覆盖的相关知识
By taking the knowledge that we learned about overriding

2
00:00:02,670 --> 00:00:05,140
我们将重新来把程序走一遍
the resources in the other folders we'll walk through the

3
00:00:05,140 --> 00:00:07,911
这样大家可以了解如何创建一个双面板的平板UI
code together on how to build up the two-pane tablet

4
00:00:07,911 --> 00:00:11,800
首先我们删除掉w820dp文件夹，因为我们不需要
UI. First remove the values w820dp folder because we don't

5
00:00:11,800 --> 00:00:13,790
为尺寸比820dp还大的屏幕制定详细的逻辑
need to provide specific logic for where the current

6
00:00:13,790 --> 00:00:16,930
是比820p还大的。然后我们需要修改一下
orientation is greater than 820 dp. Then go ahead and

7
00:00:16,930 --> 00:00:20,265
XML布局文件。我们需要创建一个新的布局文件夹--swe600dp
make the layout XML changes. Then create a new layout

8
00:00:20,265 --> 00:00:25,620
并且加入新的xml布局文件--activity_main。
swe600dp folder, and then add a new file called activity_main.

9
00:00:25,620 --> 00:00:28,070
我们要使用默认资源文件夹中与activity_main
We use the same file and name as in

10
00:00:28,070 --> 00:00:31,520
一样的文件名，这样
the base layout folder activity_main, so that this one

11
00:00:31,520 --> 00:00:35,140
这个文件就会在平板电脑上替代默认布局文件。
overrides the behavior, specifically on tablets. To see the

12
00:00:35,140 --> 00:00:37,849
当你打开这个文件查看代码的时候，你可以找到一下几个要点
code for this file, you can check out the gist

13
00:00:37,849 --> 00:00:41,320
它本质上是一个水平的线性布局，
below. Essentially it's a horizontal linear layout that can

14
00:00:41,320 --> 00:00:44,880
在它左边是forecast fragment ，右边是detail fragment
hold forecast fragment on the left, and the detail fragment

15
00:00:44,880 --> 00:00:47,120
现在我们可以好好讨论一下
on the right. Now's a good time to talk

16
00:00:47,120 --> 00:00:50,970
静态fragments与动态的fragments。 在我们的编程过程中，forecast fragment 是
about static versus dynamic fragments. In our implementation, the forecast

17
00:00:50,970 --> 00:00:53,940
静态的，因为我们在XML先把他定义出来。
fragment is a static fragment because we're defining it the XML

18
00:00:53,940 --> 00:00:56,980
无论这个设备的大小如何或者屏幕的放置方向怎样，我们都知道在main activity 中我们
layout. No matter what orientation or device size, we know that

19
00:00:56,980 --> 00:00:59,550
需要这样一个forecast fragment。换句话说
we're going to need a forecast fragment in the main activity. On

20
00:00:59,550 --> 00:01:01,776
我们需要声明一个container(容器)用来显示
the other hand, we only need to declare a container for

21
00:01:01,776 --> 00:01:06,080
detail fragment， 而不是实际的fragment。 这个初始化每次都需要
the detail fragment, but not the actual fragment. It's initialized with

22
00:01:06,080 --> 00:01:09,440
不同的参数，因为它是一个动态的fragment，于是最好
different arguments each time, as a dynamic fragment, so it's better

23
00:01:09,440 --> 00:01:12,820
用动态方法来构建一个fragment,然后将这个fragment添加到
to dynamically create and add that fragment in a fragment transaction

24
00:01:12,820 --> 00:01:16,030
main activity的java代码里。 这样的话fragment管理器
in the main activity Java code. That way the fragment manager

25
00:01:16,030 --> 00:01:19,800
可以持续的检查初始化的参数并把参数根据我们旋转设备屏幕的方向而进行调整
can keep track of those initialization arguments and pass those

26
00:01:19,800 --> 00:01:23,750
然后我们需要更新单面板布局
back to us after device rotation. Then we need to update

27
00:01:23,750 --> 00:01:26,820
从而保证两个窗口布局保持一致。
the one pane UI layouts so that they are consistent with

28
00:01:26,820 --> 00:01:29,840
在默认文件夹中的activity_main文件
the two pane case. So in the activity_main file for the

29
00:01:29,840 --> 00:01:32,820
的根布局之前是FrameLayout
base layout folder, this used to be a frame layout. We're

30
00:01:32,820 --> 00:01:35,640
我们现在要声明一个forecast fragment
going to declare it as a forecast fragment, that way it will

31
00:01:35,640 --> 00:01:38,160
这样一来它就和双面板的布局相吻合并且与XML声明的一致
match the two pin UI where this is also declared as

32
00:01:38,160 --> 00:01:41,120
这样的话main activity就可以
a fragment in the XML. That way the main activity never

33
00:01:41,120 --> 00:01:44,740
动态添加forecast fragment。
has to worry about dynamically adding the forecast fragment.

34
00:01:44,740 --> 00:01:47,540
同时在main activity的onCreateView 方法
And the main activity onCreate view method, since the

35
00:01:47,540 --> 00:01:49,930
既然fragment已经在布局中了
fragment is already inside this layout we can just

36
00:01:49,930 --> 00:01:53,370
所以我们可以把它删掉，避免动态再次添加它。 同样的
remove this so we don't dynamically add it again. Similar,

37
00:01:53,370 --> 00:01:56,660
我们需要修改这个activity_detail 布局。
we've modified the activity_detail layout in the base layout

38
00:01:56,660 --> 00:01:59,510
让我们将FrameLayout的ID改成weather_detail_container
folder. We change the frame that ID, to be

39
00:01:59,510 --> 00:02:02,340
让它的名字与
weather detail container; so that it matches the container

40
00:02:02,340 --> 00:02:06,130
双面板布局里的容器的名称吻合
view ID in the two pane UI case,. The pattern

41
00:02:06,130 --> 00:02:08,220
而detail_fragment会被添加到
here is that the detail fragment will always be

42
00:02:08,220 --> 00:02:11,770
weather_detail_container的容器中，无论是双窗口
added to a container called weather_detail_container, both in the two

43
00:02:11,770 --> 00:02:14,710
还是单窗口。 既然我们已经改了容器的名字
pane and one pane case. Since we changed the name

44
00:02:14,710 --> 00:02:18,120
我们也需要同时更新DetailActivity。
of the container we should also update the DetailActivity. This

45
00:02:18,120 --> 00:02:20,500
这个仅仅用在单面板模式下的。
is only used in one pane mode. Here's where we

46
00:02:20,500 --> 00:02:24,055
我们在这修改容器名称。 在单面板模式中， 
change the container name. In the one pane mode, the

47
00:02:24,055 --> 00:02:28,580
DetailActivity将会动态的将DetailFragment加入容器。
DetailActivity will add the DetailFragment, dynamically to this container. After

48
00:02:28,580 --> 00:02:31,650
我们修改了布局之后我们需要更新下main activity，
we modify the layout we should update the main activities,

49
00:02:31,650 --> 00:02:35,527
这样我们能够动态的添加DetailFragment。 在MainActivity中
that we dynamically add the DetailFragment. In the MainActivity

50
00:02:35,527 --> 00:02:39,250
的onCreate方法里，我们需要检查weather_detail_container是否存在
onCreate method, we check for the presence of the weather_detail_container

51
00:02:39,250 --> 00:02:41,350
于布局中，这样我们就知道这是否是一个双
in the layout to know whether this is a two

52
00:02:41,350 --> 00:02:44,360
面板界面。 我们通过一个布尔变量mTwoPanel
pane UI or not. We keep track of this information

53
00:02:44,360 --> 00:02:47,490
一直检查这个信息。记得我们开始时用的
in a bullion called mTwoPane. Remember that we start with

54
00:02:47,490 --> 00:02:50,020
变量是以M打头的。因为它是成员变量。
the letter M because it's a member variable. In this

55
00:02:50,020 --> 00:02:52,480
这里布尔值应该是真。所以我们
case, the bullion should be true. So we go ahead

56
00:02:52,480 --> 00:02:56,570
继续创建一个DetailFragment，然后把它加入进weather_detail_container。
and create a DetailFragment and add it to the weather_detail_container.

57
00:02:56,570 --> 00:02:59,690
当我们完成Rato所说的修改之后，将修改通过fragment transaction完成
We commit the change by using a fragment transaction, which

58
00:02:59,690 --> 00:03:03,120
如果我们发现详细容器没有在
Rato introduced earlier. Otherwise, if the detail container is not

59
00:03:03,120 --> 00:03:06,320
布局界面显示，这时布尔值应该是负值，
present in the layout, then the boolean should be false,

60
00:03:06,320 --> 00:03:09,210
说明这个界面是一个单面板模式的。
meaning that this is a one pane UI for phones.

61
00:03:09,210 --> 00:03:11,830
这样的话，detail activity会负责显示
In this case, the detail activity will handle showing the

62
00:03:11,830 --> 00:03:15,080
detail fragment。主要如果是在双面板的情况下，我们需要检查
detail fragment. Notice for the two pane case that we

63
00:03:15,080 --> 00:03:19,060
savedInstanceState的值是null。 如果savedInstanceState
check, if the savedInstanceState bundle is null. If the savedInstanceState

64
00:03:19,060 --> 00:03:21,830
不是null，我们就不需要创造新的。
bundle is not null, then we don't create a new one.

65
00:03:21,830 --> 00:03:24,170
原因是，如果你想要转动你的手机。
And here's the reason why. Say, you want to rotate

66
00:03:24,170 --> 00:03:27,760
在活动和fragments改变之前，
the device. Before the activity and fragments get torn down,

67
00:03:27,760 --> 00:03:31,070
我们把所有的信息储存在state bundles里。 
we store information in saved state bundles. Then after the

68
00:03:31,070 --> 00:03:35,220
在屏幕旋转之后，系统通过传递相同的参数，
orientation change, the system restores the activity and the fragments

69
00:03:35,220 --> 00:03:37,480
把这些activity与fragments还原，这样一来
by passing back the same bundle so that it can

70
00:03:37,480 --> 00:03:40,560
系统重新创建这个界面布局并还原了之前的状态。这意味着，
be re-created with the same state. That means if the

71
00:03:40,560 --> 00:03:43,670
如果bundle存在，我们就让系统重新把
bundle exists then we should let the system handle restoring

72
00:03:43,670 --> 00:03:46,840
detail fragment重置并且可以跳过这部分代码了。这样一旦
the detail fragment and we can skip this code. Once the

73
00:03:46,840 --> 00:03:50,260
detail fragment 被动态加入，它就可以显示一些placeholder数据
detail fragment is added dynamically make it show some placeholder

74
00:03:50,260 --> 00:03:53,910
，不过仅仅用于测试需要。 我们还将过一遍右侧的
data just for testing purposes. Later we'll plumb through the right

75
00:03:53,910 --> 00:03:56,580
逻辑这样它就能正确显示左侧所选择项目的数据
logic so that it can display the right information for

76
00:03:56,580 --> 00:04:00,060
显示正确的信息。我们需要修改DetailFragment
the selected date on the left. Modify the DetailFragment so that

77
00:04:00,060 --> 00:04:03,800
传入的Intent就不会包含key为DATE_KEY的数据。
it doesn't expect the incoming intent to have the DATE_KEY.

78
00:04:03,800 --> 00:04:06,320
如此一来它就不会启动detail loader
In this case it doesn't start the loader, which is fine,

79
00:04:06,320 --> 00:04:08,730
它只是会转向在xml所定义的placeholder中的数据
and it just falls back to some placeholder data that we

80
00:04:08,730 --> 00:04:12,310
onResume方法做的是同样的事。
have in our XML. The same goes for the onResume method.

81
00:04:12,310 --> 00:04:15,670
如果intent是空的，我们不需要重启loader。
We don't restart the loader if the intent is blank.

82
00:04:15,670 --> 00:04:18,550
intent可以是空的原因是，
The reason the Intent could be blank, is because the detail

83
00:04:18,550 --> 00:04:22,360
detail fragment被正确添加到main activity。所以main activity
fragment can now exist within the main activity. So the main

84
00:04:22,360 --> 00:04:25,650
也没有DetailActivity启动时附带的Intent Key，
activity doesn't have the same Intent key, that the DetailActivity was

85
00:04:25,650 --> 00:04:29,060
一旦你做了这些变动，
launched with. Once you make the changes for the wireframes,

86
00:04:29,060 --> 00:04:31,050
我们的应用就会变成这样。它不会
this is what the app should look like. The reason it

87
00:04:31,050 --> 00:04:34,680
显示图标的原因是我们从默认布局之内删除了图标
doesn't show an icon here is because we removed the icon

88
00:04:34,680 --> 00:04:37,810
不过一旦数据在之后的章节被填满后，
from being hardcoded in the layout. But once this data's populated

89
00:04:37,810 --> 00:04:40,290
它会重新出现。
dynamically in a later section, it should show up again.

